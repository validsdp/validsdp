Preliminary remark
==================

Currently, the relaxation coefficients sigma* are hardcoded for
ValidSDP benchmarks whereas they are automatically computed by other
tools requiring them. This is a limitation of ValidSDP we are
currently alleviating. The automatic computation feature is already
available in the underlying OSDP library. Experiments with OSDP
indicate that, whereas this computation has an impact on SDP solvers
running time (let's say OSDP becomes two times slower), this shouldn't
incur any major overhead to ValidSDP (since currently, SDP solver
running time is only a small portion of ValidSDP total running time).

Short description of benchmarks
===============================

Three subdirectories

global
------

A set of global optimization problems consisting in proving bounds for
polynomials on given hyperboxes. These problems are taken from

  Cesar Munoz and Anthony Narkawicz
  Formalization of Bernstein Polynomials and Applications to Global Optimization
  J. Autom. Reasoning, 2013

flyspeck
--------

A set of problems on 6-variable polynomials coming from some
inequalities of the Flyspeck project. Most of them require to prove
that a given polynomial is positive on a given hyperbox. Some
require to prove that at least one of two or three polynomials is
positive on any point of a given hyperbox (two polynomials in
fs868, fs884 and fs890, three polynomials in fs260 and fs491).

prog_invs
---------

A set of problems about loop invariants of programs, from

  Assalé Adjé, Pierre-Loïc Garoche, Victor Magron
  Property-based Polynomial Invariant Generation Using Sums-of-Squares Optimization
  Static Analysis Symposium (SAS), 2015

They require to prove that a given polynomial $p$ is non negative when
some initial conditions are met and that whenever $p$ is non negative,
then $p\circ f$ also is, for a given polynomial $f$ (representing the
loop body assignments).

Content of each subdirectory
----------------------------

Makefile: to run the benchmarks (c.f., below)
descr: list of benchmarks with number of variables and degrees

For each benchmark <test>:

<test>.ml: benchmark with OSDP
<test>.v: benchmark with ValidSDP
<test>.pvs: benchmark with PVS/Bernstein
<test>.hl: benchmark with HOL Light/Formal_ineqs
<test>.sage: benchmark with MC11

input.ineq: due to NLCertify's input format, all benchmarks for this tool are gathered here
lexer.mll parser.mly parse.ml parse.ml: files needed for OSDP benchmarks
*.sage: other Sage files corresponding to MC11 code (e.g., test_MC11.sage)
param.transc.coq param.transc.nocoq: parameters for NLCertify

Remark: PVS, HOL Light and NLCertify are not applicable to prog_invs benchmarks.

Dependencies
============

- runlim (http://fmv.jku.at/runlim/, Debian package runlim)
- ValidSDP
- SageMath (for MC11, www.sagemath.org, tested with version 7.3, the sage executable must be in the path)
- PVS 5.0 with nasalib (see below)
- NLCertify (see below)
- HOL Light (see below)

Installing PVS 5.0 and nasalib
------------------------------

1. Go to http://pvs.csl.sri.com/download.shtml

  Download PVS 5.0

2. Download the PVS NASA libraries for PVS 5.0

  You can either go to
      http://shemesh.larc.nasa.gov/fm/ftp/larc/PVS-library/pvslib.html

  or directly download the following tarball:
      http://shemesh.larc.nasa.gov/fm/ftp/larc/PVS-library-archive/p50_pvslib-full.tgz

3. Unzip the tarballs and run the PVS installation scripts:

  E.g., run the following commands, after replacing "..." with the actual path:

  % mkdir ~/pvs50 && cd ~/pvs50
  % tar xf .../pvs-5.0-ix86_64-Linux-allegro.tgz
  % tar xf .../p50_pvslib-full.tgz
  % bin/relocate

4. Enable the nasalib patches for the proveit tool:

  E.g., if PVS 5.0 is located in ~/pvs50, you can run:

  % rm -i ~/.pvs.lisp ~/.pvs.l*fasl
  % perl -w -i.bak -p -e 's,"\(proveit\)","(progn (load \\"$ENV{HOME}/pvs50/nasalib/pvs-patches.lisp\\") (proveit))",;' ~/pvs50/proveit

5. Set the environment variable PVS_LIBRARY_PATH:

  % export PVS_LIBRARY_PATH="${HOME}/pvs50/nasalib"

Installing NLCertify
--------------------

Install OPAM (1.2) and Initialize it. To get some instructions
regarding the installation, you can go to
<http://opam.ocaml.org/doc/Install.html>.

Install BLAS/LAPACK shared libraries (for lacaml)

% sudo aptitude install libblas3 libblas-dev liblapack3 liblapack-dev

Install NLCertify's dependencies (including SDPA)

% opam install ocamlfind ocamlgraph zarith lacaml.7.2.6

% apt-get install sdpa  # adapt to your distro if not Debian based

Checkout NLCertify (as of 2014-11-04 12:07:04)

% sudo aptitude install git gitk
% mkdir -p ~/forge/git-anon && cd ~/forge/git-anon
% git clone https://forge.ocamlcore.org/anonscm/git/nl-certify/nl-certify.git
% cd nl-certify
% git checkout --detach 9e8540429eb984c56ffa5ad74547de796250383b
% make
% cd coq && make #(see remark below)

Remark: to compile with Coq 8.5, a few "From mathcomp " must be added
before the "Require Import"s related to mathcomp. See nl-certify.patch

Installing HOL Light & Formal_ineqs
-----------------------------------

### Install Camlp5 (tested with OCaml 4.02.3, using OPAM)

% opam install camlp5

% camlp5 -v # Camlp5 version 6.16 (ocaml 4.02.3)

% camlp5 -pmode # should output "strict"
  # if not, see https://github.com/jrh13/hol-light/blob/master/README

### Reuse CSDP 6.1.1 (that has been installed for OSDP)

### Checkout HOL Light

% mkdir -p ~/forge/git-anon && cd ~/forge/git-anon
% git clone https://github.com/jrh13/hol-light.git
% cd hol-light
% git checkout --detach 970121cabace1f59d72b5e55fdb9678c99264bce
% make

### Install dmtcp-1.2.8 (NOT dmtcp-2.x):

% mkdir -p ~/forge/git-anon && cd ~/forge/git-anon
% git clone -b 1.2.8 https://github.com/dmtcp/dmtcp.git
% cd dmtcp
% ./configure && make && sudo make install

### Create checkpoints using DMTCP

Note: this procedure may not work within an SSH session.

% export HOLLIGHT_DIR=~/forge/git-anon/hol-light

% cd $HOLLIGHT_DIR
% mkdir dmtcp-multi && cd dmtcp-multi
% dmtcp_checkpoint -n ocaml -I +../camlp5 # then type this, including the '#':
  #use "../hol.ml";;
  #use "../Multivariate/realanalysis.ml";;
% dmtcp_command --checkpoint # from another terminal (when computation is over)
  # and finally close the OCaml top-level (with Ctrl+D)

% cd $HOLLIGHT_DIR
% mkdir dmtcp-multi-ineqs && cd dmtcp-multi-ineqs
% ../dmtcp-multi/dmtcp_restart_script.sh --ckptdir ./ # restarts the top-level
  #use "../Formal_ineqs/make.ml";;
% dmtcp_command --checkpoint # from another terminal (when computation is over)
  # and finally close the OCaml top-level (with Ctrl+D)

Running the benchmarks
======================

First, parameters at the beginning of each global/Makefile,
flyspeck/Makefile and prog_invs/Makefile have to be adjusted.

Then, for running all tools

% make

Or independently

% make logs_osdp
% make logs_coq
% make logs_bernstein
% make logs_MC11
% make logs_nlcnocoq
% make logs_nlccoq
% make logs_taylor

Collecting the results
----------------------

% ./log2tex.sh > table.tex
% pdflatex benchs.tex

will produce a file benchs.pdf collecting running times.
