From mathcomp Require Import ssreflect.
Require Import Reals.
From ValidSDP Require Import validsdp.

Local Open Scope R_scope.

(* Attempt to prove that p >= 0 with p below is an
 * inductive invariant, for the program
 *
x1 = rand(-1.0, 1.0);
x2 = rand(-1.0, 1.0);
while (-1 <= 0) {
  pre_x1 = x1; pre_x2 = x2;
  if (x2 <= x1) {
    x1 = 0.687 * pre_x1 + 0.558 * pre_x2 - 0.0001 * pre_x1 * pre_x2;
    x2 = -0.292 * pre_x1 + 0.773 * pre_x2;
  } else {
    x1 = 0.369 * pre_x1 + 0.532 * pre_x2 - 0.0001 * pre_x1^2;
    x2 = -1.27 * pre_x1 + 0.12 * pre_x2 - 0.0001 * pre_x1 * pre_x2;
  }
}
 *)

(* initial condition -1 <= x1 <= 1 encoded as (x1 - 1)*(1 - x1) (>= 0) *)
Let pI1 (x0 x1 : R) := (x0 - 1) * (1 - x0).
(* initial condition -1 <= x2 <= 1 *)
Let pI2 (x0 x1 : R) := (x1 - 1) * (1 - x1).
(* guard x2 <= x1 (then branch) *)
Let g0 x0 x1 := x0 - x1.
(* assignment in then branch *)
Let t0_x0 (x0 x1 : R) := 687 / 1000 * x0 + 558 / 1000 * x1 - 1 / 10000 * x0 * x1.
Let t0_x1 (x0 x1 : R) := (-292) / 1000 * x0 + 773 / 1000 * x1.
(* guard x2 >= x1 (else branch) *)
Let g1 x0 x1 := x1 - x0.
(* assignment in else branch *)
Let t1_x0 (x0 x1 : R) := 369 / 1000 * x0 + 532 / 1000 * x1 - 1 / 10000 * x0^2.
Let t1_x1 (x0 x1 : R) := (-127) / 100 * x0 + 12 / 100 * x1 - 1 / 10000 * x0 * x1.

Let p x0 x1 :=
  360137561854871/1125899906842624
  + -4648532753362095/1152921504606846976 * x0^2
  + -522343598561959/576460752303423488 * x0 * x1
  + -7354102629772791/2305843009213693952 * x1^2
  + 5916113786527169/576460752303423488 * x0^3
  + -574397345683745/36028797018963968 * x0^2 * x1
  + -1432498279428087/576460752303423488 * x0 * x1^2
  + 4968500152983215/288230376151711744 * x1^3
  + -8454232510940359/72057594037927936 * x0^4
  + 8778941830946171/288230376151711744 * x0^3 * x1
  + -3420954828653527/36028797018963968 * x0^2 * x1^2
  + -8812954633677685/144115188075855872 * x0 * x1^3
  + -4295668762430125/72057594037927936 * x1^4.
  
Let init_sigma1 x0 x1 :=
  6969700908252209/2251799813685248 + 1936861623269983/1125899906842624 * 
  x0 + 8638278161931195/9007199254740992 * x1
  + 8039463210860667/2251799813685248 * x0^2
  + 504797103226149/1125899906842624 * x0 * x1
  + 6882445080006861/2251799813685248 * x1^2.
  
Let init_sigma2 x0 x1 :=
  6851427362660435/2251799813685248 + 8157897223105195/9007199254740992 * 
  x0 + 7290043555817641/4503599627370496 * x1
  + 6830297091004959/2251799813685248 * x0^2
  + 1778392623166885/4503599627370496 * x0 * x1
  + 7872971293768195/2251799813685248 * x1^2.
  
Let ind0_sigma x0 x1 :=
  4877553350083767/36028797018963968
  + -1997707809461377/72057594037927936 * x0
  + 2187482397693129/144115188075855872 * x1
  + 7488305141221635/72057594037927936 * x0^2
  + 7358758100857351/144115188075855872 * x0 * x1
  + 508238007526087/9007199254740992 * x1^2
  + 7394655719930415/288230376151711744 * x0^3
  + -2840635029920985/144115188075855872 * x0^2 * x1
  + -1874489934169913/36028797018963968 * x0 * x1^2
  + 8612731474347711/288230376151711744 * x1^3
  + 8183823333947951/36028797018963968 * x0^4
  + -7634638893470957/1152921504606846976 * x0^3 * x1
  + 6524870611900913/36028797018963968 * x0^2 * x1^2
  + 4786704327653985/144115188075855872 * x0 * x1^3
  + 6672845098925895/36028797018963968 * x1^4.
  
Let ind0_sigma0 x0 x1 :=
  97835905242673/1125899906842624 + -7446197192439667/288230376151711744 * 
  x0 + 1403192462716801/36028797018963968 * x1
  + 5654007562908805/576460752303423488 * x0^2
  + -3516651593694133/72057594037927936 * x0 * x1
  + 3666935439403231/144115188075855872 * x1^2
  + -7597104325480753/288230376151711744 * x0^3
  + 5331693480671311/144115188075855872 * x0^2 * x1
  + -8865863923094509/288230376151711744 * x0 * x1^2
  + 2926919296866983/72057594037927936 * x1^3
  + -1381668608481713/288230376151711744 * x0^4
  + -622072549638503/9007199254740992 * x0^3 * x1
  + -2470915060187521/72057594037927936 * x0^2 * x1^2
  + -8474490195525243/144115188075855872 * x0 * x1^3
  + 8834337471118083/288230376151711744 * x1^4
  + -3605527906821529/144115188075855872 * x0^5
  + 4094282331933473/72057594037927936 * x0^4 * x1
  + -7374632534231025/288230376151711744 * x0^3 * x1^2
  + 161393863918039/1152921504606846976 * x0^2 * x1^3
  + -6012118384360485/144115188075855872 * x0 * x1^4
  + 3566445800093933/72057594037927936 * x1^5
  + 616738590563649/18014398509481984 * x0^6
  + -7070549625538445/576460752303423488 * x0^5 * x1
  + 3036260330666039/72057594037927936 * x0^4 * x1^2
  + 5292019477294149/2305843009213693952 * x0^3 * x1^3
  + 4549462196251247/144115188075855872 * x0^2 * x1^4
  + 5313555413538749/9223372036854775808 * x0 * x1^5
  + 3561987732314379/144115188075855872 * x1^6.
  
Let ind1_sigma x0 x1 :=
  4820724931310605/36028797018963968
  + 6863110903940129/4611686018427387904 * x0
  + -5429064407460365/288230376151711744 * x1
  + 8184675296139373/72057594037927936 * x0^2
  + 7962851133475193/576460752303423488 * x0 * x1
  + 1840463786608067/36028797018963968 * x1^2
  + -3178357008407245/72057594037927936 * x0^3
  + 5369775202166481/288230376151711744 * x0^2 * x1
  + 1673405478849153/72057594037927936 * x0 * x1^2
  + -926116536073577/36028797018963968 * x1^3
  + 4547488508387361/18014398509481984 * x0^4
  + -869322857311851/72057594037927936 * x0^3 * x1
  + 5637552437168747/36028797018963968 * x0^2 * x1^2
  + 3340442596682111/1152921504606846976 * x0 * x1^3
  + 7090021241255813/36028797018963968 * x1^4.
  
Let ind1_sigma1 x0 x1 :=
  6660788132466649/72057594037927936 + 368473119745493/9007199254740992 * 
  x0 + -2855950624780723/72057594037927936 * x1
  + 1688204157433715/36028797018963968 * x0^2
  + -476498346554233/18014398509481984 * x0 * x1
  + 4911666281316141/144115188075855872 * x1^2
  + 2909410354217357/36028797018963968 * x0^3
  + -323249981714003/18014398509481984 * x0^2 * x1
  + 551200229683083/18014398509481984 * x0 * x1^2
  + -3302890678664081/72057594037927936 * x1^3
  + 985193751566605/36028797018963968 * x0^4
  + -2581261619691975/72057594037927936 * x0^3 * x1
  + -6715727346884569/288230376151711744 * x0^2 * x1^2
  + -844633921236165/18014398509481984 * x0 * x1^3
  + 3074354010382161/72057594037927936 * x1^4
  + 2644073914032777/36028797018963968 * x0^5
  + -8929748996133965/576460752303423488 * x0^4 * x1
  + 1194371688276173/36028797018963968 * x0^3 * x1^2
  + -799209618136417/36028797018963968 * x0^2 * x1^3
  + 8064260193544941/288230376151711744 * x0 * x1^4
  + -7350657203778581/144115188075855872 * x1^5
  + 2024593637040499/36028797018963968 * x0^6
  + -2568130352972949/1152921504606846976 * x0^5 * x1
  + 2712432357945331/72057594037927936 * x0^4 * x1^2
  + -7386804698467587/1152921504606846976 * x0^3 * x1^3
  + 2626617419870131/72057594037927936 * x0^2 * x1^4
  + 8821642889877931/2305843009213693952 * x0 * x1^5
  + 3391607742299087/144115188075855872 * x1^6.
  
Lemma init_pos (x0 x1 : R) :
  p x0 x1
  - init_sigma1 x0 x1 * pI1 x0 x1
  - init_sigma2 x0 x1 * pI2 x0 x1 >= 0.
Proof.
rewrite /p /init_sigma1 /pI1 /init_sigma2 /pI2.
do_sdp.
Qed.

Lemma init_sigma1_pos (x0 x1 : R) : init_sigma1 x0 x1 >= 0.
Proof. rewrite /init_sigma1. do_sdp. Qed.

Lemma init_sigma2_pos (x0 x1 : R) : init_sigma2 x0 x1 >= 0.
Proof. rewrite /init_sigma2. do_sdp. Qed.

Lemma ind0_pos (x0 x1 : R) :
  p (t0_x0 x0 x1) (t0_x1 x0 x1)
  - ind0_sigma x0 x1 * p x0 x1
  - ind0_sigma0 x0 x1 * g0 x0 x1 >= 0.
Proof.
rewrite /p /t0_x0 /t0_x1 /ind0_sigma /ind0_sigma0 /g0.
do_sdp.
Qed.

Lemma ind0_sigma_pos (x0 x1 : R) : ind0_sigma x0 x1 >= 0.
Proof. rewrite /ind0_sigma. do_sdp. Qed.

Lemma ind0_sigma0_pos (x0 x1 : R) : ind0_sigma0 x0 x1 >= 0.
Proof. rewrite /ind0_sigma0. do_sdp. Qed.

Lemma ind1_pos (x0 x1 : R) :
  p (t1_x0 x0 x1) (t1_x1 x0 x1)
  - ind1_sigma x0 x1 * p x0 x1
  - ind1_sigma1 x0 x1 * g1 x0 x1 >= 0.
Proof.
rewrite /p /t1_x0 /t1_x1 /ind1_sigma /ind1_sigma1 /g1.
do_sdp.
Qed.

Lemma ind1_sigma_pos (x0 x1 : R) : ind1_sigma x0 x1 >= 0.
Proof. rewrite /ind1_sigma. do_sdp. Qed.

Lemma ind1_sigma1_pos (x0 x1 : R) : ind1_sigma1 x0 x1 >= 0.
Proof. rewrite /ind1_sigma1. do_sdp. Qed.

Theorem init (x0 x1 x2 : R) :
  pI1 x0 x1 >= 0 -> pI2 x0 x1 >= 0 ->
  p x0 x1 >= 0.
Proof.
move=> H1 H2.
apply (Rge_trans _ (p x0 x1 - init_sigma1 x0 x1 * pI1 x0 x1)).
{ rewrite -{1}(Rminus_0_r (p _ _)).
  apply Rplus_ge_compat_l, Ropp_ge_contravar.
  by apply Rle_ge, Rmult_le_pos; apply Rge_le; [apply init_sigma1_pos|]. }
apply (Rge_trans _ (p x0 x1 - init_sigma1 x0 x1 * pI1 x0 x1
                    - init_sigma2 x0 x1 * pI2 x0 x1)).
{ rewrite -{1}(Rminus_0_r (_ - _)).
  apply Rplus_ge_compat_l, Ropp_ge_contravar.
  by apply Rle_ge, Rmult_le_pos; apply Rge_le; [apply init_sigma2_pos|]. }
apply init_pos.
Qed.

Theorem ind0 (x0 x1 : R) :
  p x0 x1 >= 0 -> g0 x0 x1 >= 0 -> 
  p (t0_x0 x0 x1) (t0_x1 x0 x1) >= 0.
Proof.
move=> H1 H2.
apply (Rge_trans _ (p (t0_x0 x0 x1) (t0_x1 x0 x1)
                    - ind0_sigma x0 x1 * p x0 x1)).
{ rewrite -{1}(Rminus_0_r (p _ _)).
  apply Rplus_ge_compat_l, Ropp_ge_contravar.
  by apply Rle_ge, Rmult_le_pos; apply Rge_le; [apply ind0_sigma_pos|]. }
apply (Rge_trans _ (p (t0_x0 x0 x1) (t0_x1 x0 x1)
                    - ind0_sigma x0 x1 * p x0 x1
                    - ind0_sigma0 x0 x1 * g0 x0 x1)).
{ rewrite -{1}(Rminus_0_r (_ - _)).
  apply Rplus_ge_compat_l, Ropp_ge_contravar.
  by apply Rle_ge, Rmult_le_pos; apply Rge_le; [apply ind0_sigma0_pos|]. }
apply ind0_pos.
Qed.

Theorem ind1 (x0 x1 : R) :
  p x0 x1 >= 0 -> g1 x0 x1 >= 0 ->
  p (t1_x0 x0 x1) (t1_x1 x0 x1) >= 0.
Proof.
move=> H1 H2.
apply (Rge_trans _ (p (t1_x0 x0 x1) (t1_x1 x0 x1)
                    - ind1_sigma x0 x1 * p x0 x1)).
{ rewrite -{1}(Rminus_0_r (p _ _)).
  apply Rplus_ge_compat_l, Ropp_ge_contravar.
  by apply Rle_ge, Rmult_le_pos; apply Rge_le; [apply ind1_sigma_pos|]. }
apply (Rge_trans _ (p (t1_x0 x0 x1) (t1_x1 x0 x1)
                    - ind1_sigma x0 x1 * p x0 x1
                    - ind1_sigma1 x0 x1 * g1 x0 x1)).
{ rewrite -{1}(Rminus_0_r (_ - _)).
  apply Rplus_ge_compat_l, Ropp_ge_contravar.
  by apply Rle_ge, Rmult_le_pos; apply Rge_le; [apply ind1_sigma1_pos|]. }
apply ind1_pos.
Qed.
