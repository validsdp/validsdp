From mathcomp Require Import ssreflect.
Require Import Reals.
From ValidSDP Require Import validsdp.

Local Open Scope R_scope.

(* Attempt to prove that p >= 0 with p below is an
 * inductive invariant, for the program
 *
x1 = rand(0.9, 1.1);
x2 = rand(0, 0.2);
x3 = rand(0, 0.2);
while (-1 <= 0) {
  pre_x1 = x1; pre_x2 = x2; pre_x3 = x3;
  if (x1^2 + x2^2 + x3^2 <= 1) {
    x1 = 0.25 * (0.8 * pre_x1^2 + 1.4 * pre_x2 - 0.5 * pre_x3^2);
    x2 = 0.25 * (1.3 * pre_x1 + 0.5 * pre_x3^2);
    x3 = 0.25 * (1.4 * pre_x2 + 0.8 * pre_x3^2);
  } else {
    x1 = 0.25 * (0.8 * pre_x1 + 0.4 * pre_x2^2);
    x2 = 0.25 * (-0.6 * pre_x2^2 + 0.3 * pre_x3^2);
    x3 = 0.25 * (0.5 * pre_x3 + 0.4 * pre_x1^2);
  }
}
 *)

(* initial condition 0.9 <= x1 <= 1.1 encoded as (x1 - 0.9)*(1.1 - x1) (>= 0) *)
Let pI1 (x0 x1 x2 : R) := (x0 - 9 / 10) * (11 / 10 - x0).
(* initial condition 0 <= x2 <= 0.2 *)
Let pI2 (x0 x1 x2 : R) := x1 * (2 / 10 - x1).
(* initial condition 0 <= x3 <= 0.2 *)
Let pI3 (x0 x1 x2 : R) := x2 * (2 / 10 - x2).
(* guard x1^2 + x2^2 + x3^2 <= 1 (then branch) *)
Let g0 x0 x1 x2 := 1 - (x0^2 + x1^2 + x2^2).
(* assignment in then branch *)
Let t0_x0 (x0 x1 x2 : R) := 1 / 4 * (8 / 10 * x0^2 + 14 / 10 * x1 - 5 / 10 * x2^2).
Let t0_x1 (x0 x1 x2 : R) := 1 / 4 * (13 / 10 * x0^2 + 5 / 10 * x2^2).
Let t0_x2 (x0 x1 x2 : R) := 1 / 4 * (14 / 10 * x1 + 8 / 10 * x2^2).
(* guard x1^2 + x2^2 + x3^2 >= 1 (else branch) *)
Let g1 x0 x1 x2 := (x0^2 + x1^2 + x2^2) - 1.
(* assignment in else branch *)
Let t1_x0 (x0 x1 x2 : R) := 1 / 4 * (8 / 10 * x0 + 4 / 10 * x1^2).
Let t1_x1 (x0 x1 x2 : R) := 1 / 4 * ((-6) / 10 * x1^2 + 3 / 10 * x2^2).
Let t1_x2 (x0 x1 x2 : R) := 1 / 4 * (5 / 10 * x2 + 4 / 10 * x0^2).

Let p x0 x1 x2 :=
  376932522065681012931/295147905179352825856
  + 8509962722502765/295147905179352825856 * x0
  + 4810786678983139/147573952589676412928 * x1
  + 8195275705635465/1180591620717411303424 * x2
  + -5286590888873701/4503599627370496 * x0^2
  + 3142771579399875/36028797018963968 * x0 * x1
  + -591108560874675/281474976710656 * x1^2
  + 1261458973270647/2251799813685248 * x0 * x2
  + 5929053759940775/72057594037927936 * x1 * x2
  + -1259727915632095/562949953421312 * x2^2
  + 1149275400895391/4503599627370496 * x0^3
  + 7285847311712275/18014398509481984 * x0^2 * x1
  + 8440266932050133/18014398509481984 * x0 * x1^2
  + 4371217067606495/36028797018963968 * x1^3
  + -458360830646393/1125899906842624 * x0^2 * x2
  + -2813070140505775/4503599627370496 * x0 * x1 * x2
  + -8737122075031031/72057594037927936 * x1^2 * x2
  + 3341105181056463/4503599627370496 * x0 * x2^2
  + 7431847970290251/18014398509481984 * x1 * x2^2
  + -7134326653543871/288230376151711744 * x2^3
  + -4419035466710003/36028797018963968 * x0^4
  + -3191026702181451/18014398509481984 * x0^3 * x1
  + -8852489850214139/72057594037927936 * x0^2 * x1^2
  + -2762344079633701/36028797018963968 * x0 * x1^3
  + -974190988861453/36028797018963968 * x1^4
  + 4592531851313069/36028797018963968 * x0^3 * x2
  + 1897745899402969/9007199254740992 * x0^2 * x1 * x2
  + 3929173054132589/36028797018963968 * x0 * x1^2 * x2
  + 5952875244748005/288230376151711744 * x1^3 * x2
  + -5462054773810051/36028797018963968 * x0^2 * x2^2
  + -5346287477580991/36028797018963968 * x0 * x1 * x2^2
  + -92562462037723/2251799813685248 * x1^2 * x2^2
  + 8810307269401287/576460752303423488 * x0 * x2^3
  + 3135835432654057/576460752303423488 * x1 * x2^3
  + -569947876840979/288230376151711744 * x2^4.
  
Let init_sigma1 x0 x1 x2 :=
  439997045854127/140737488355328 + 50830031566605/17592186044416 * x0
  + 5953640627220335/18014398509481984 * x1
  + 7636891115123933/18014398509481984 * x2
  + 7934773778094683/2251799813685248 * x0^2
  + 3024912430024373/9007199254740992 * x0 * x1
  + 8833942281102489/4503599627370496 * x1^2
  + 37468617165475/140737488355328 * x0 * x2
  + -6396462250162499/1152921504606846976 * x1 * x2
  + 2248710869037013/1125899906842624 * x2^2.
  
Let init_sigma2 x0 x1 x2 :=
  6397119673933263/4503599627370496 + -7394071569509261/9007199254740992 * 
  x0 + -6681097943759055/36028797018963968 * x1
  + -662035248111917/2251799813685248 * x2
  + 2875132179664431/2251799813685248 * x0^2
  + -1165962737842421/4503599627370496 * x0 * x1
  + 2960264819404091/1125899906842624 * x1^2
  + -1684545359108069/4503599627370496 * x0 * x2
  + -5443729596455501/72057594037927936 * x1 * x2
  + 8782955460366829/4503599627370496 * x2^2.
  
Let init_sigma3 x0 x1 x2 :=
  3217395339207713/2251799813685248 + -7490579363634803/9007199254740992 * 
  x0 + -6348306275931857/18014398509481984 * x1
  + -5058145496229679/36028797018963968 * x2
  + 5748971774226863/4503599627370496 * x0^2
  + -6455704139893289/18014398509481984 * x0 * x1
  + 137281573084213/70368744177664 * x1^2
  + -4776382094174031/18014398509481984 * x0 * x2
  + -2603878695572415/36028797018963968 * x1 * x2
  + 368421470641909/140737488355328 * x2^2.
  
Let ind0_sigma x0 x1 x2 :=
  3164254034392305/9007199254740992
  + 2620611840155357/288230376151711744 * x0
  + 898345735146479/36028797018963968 * x1
  + -1277801977386097/72057594037927936 * x2
  + 2265077871464475/9007199254740992 * x0^2
  + -845127151078979/72057594037927936 * x0 * x1
  + 5340071854751091/18014398509481984 * x1^2
  + 6007516208578773/288230376151711744 * x0 * x2
  + 1068280802163413/144115188075855872 * x1 * x2
  + 2970695409574453/9007199254740992 * x2^2
  + -5251402303923267/576460752303423488 * x0^3
  + 6826343943185427/576460752303423488 * x0^2 * x1
  + 7684686665697735/288230376151711744 * x0 * x1^2
  + 2961366555033059/288230376151711744 * x1^3
  + -2686990818327313/144115188075855872 * x0^2 * x2
  + -3001100586393525/144115188075855872 * x0 * x1 * x2
  + -2899061818231911/288230376151711744 * x1^2 * x2
  + 4913968507140273/144115188075855872 * x0 * x2^2
  + 5299577545512011/288230376151711744 * x1 * x2^2
  + -4921061270090385/576460752303423488 * x2^3
  + 5942324938852257/18014398509481984 * x0^4
  + -2509661236360407/288230376151711744 * x0^3 * x1
  + 4526999585268935/18014398509481984 * x0^2 * x1^2
  + -1139395485010311/288230376151711744 * x0 * x1^3
  + 6549909161390087/18014398509481984 * x1^4
  + 7233119647189057/576460752303423488 * x0^3 * x2
  + 911025549461529/144115188075855872 * x0^2 * x1 * x2
  + 8949405693433629/576460752303423488 * x0 * x1^2 * x2
  + 6760733938759871/1152921504606846976 * x1^3 * x2
  + 8924040268117615/36028797018963968 * x0^2 * x2^2
  + -7849513648787139/2305843009213693952 * x0 * x1 * x2^2
  + 8241967058881103/36028797018963968 * x1^2 * x2^2
  + 8135460130804057/576460752303423488 * x0 * x2^3
  + 2877123282918303/576460752303423488 * x1 * x2^3
  + 814212100927663/2251799813685248 * x2^4.
  
Let ind0_sigma0 x0 x1 x2 :=
  3498617429567023/9007199254740992 + 1663611817805507/72057594037927936 * 
  x0 + 1764124679989933/144115188075855872 * x1
  + -5136270812240085/18446744073709551616 * x2
  + 2794667734421449/9007199254740992 * x0^2
  + 5938984965648095/2305843009213693952 * x0 * x1
  + 2375783197066247/9007199254740992 * x1^2
  + -1522062214656849/1152921504606846976 * x0 * x2
  + -2465899617536509/1152921504606846976 * x1 * x2
  + 5475763675528417/18014398509481984 * x2^2
  + 3220230750694473/288230376151711744 * x0^3
  + -8678029517838583/2305843009213693952 * x0^2 * x1
  + 2225146813354279/2305843009213693952 * x0 * x1^2
  + 5333876831242353/1152921504606846976 * x1^3
  + 4522535212039563/1152921504606846976 * x0^2 * x2
  + 4764075780443739/9223372036854775808 * x0 * x1 * x2
  + 6661294143715401/4611686018427387904 * x1^2 * x2
  + 3708214714784333/1152921504606846976 * x0 * x2^2
  + -3916997906712023/576460752303423488 * x1 * x2^2
  + 5864752272028625/4611686018427387904 * x2^3
  + 2269480003919017/9007199254740992 * x0^4
  + 6687676689809681/1152921504606846976 * x0^3 * x1
  + 5698408276382477/36028797018963968 * x0^2 * x1^2
  + 2856908967001945/576460752303423488 * x0 * x1^3
  + 4197602471782533/18014398509481984 * x1^4
  + 3058469786392771/576460752303423488 * x0^3 * x2
  + -1613800446569751/576460752303423488 * x0^2 * x1 * x2
  + 952550843032547/576460752303423488 * x0 * x1^2 * x2
  + -5235782736728191/2305843009213693952 * x1^3 * x2
  + 2831886738226795/18014398509481984 * x0^2 * x2^2
  + 1378554825514363/288230376151711744 * x0 * x1 * x2^2
  + 2711750493554653/18014398509481984 * x1^2 * x2^2
  + 4790505914151037/1152921504606846976 * x0 * x2^3
  + -1505023684629745/576460752303423488 * x1 * x2^3
  + 8609490070837811/36028797018963968 * x2^4
  + 6633496653863007/288230376151711744 * x0^5
  + 1063217155140659/72057594037927936 * x0^4 * x1
  + 8521233925103961/576460752303423488 * x0^3 * x1^2
  + 2950714871055693/288230376151711744 * x0^2 * x1^3
  + 3500057890712345/144115188075855872 * x0 * x1^4
  + 4355306905177051/288230376151711744 * x1^5
  + -5822301968961535/576460752303423488 * x0^4 * x2
  + -5923553789505749/576460752303423488 * x0^3 * x1 * x2
  + -771727319111919/144115188075855872 * x0^2 * x1^2 * x2
  + -3370384906669545/288230376151711744 * x0 * x1^3 * x2
  + -6953483857337059/1152921504606846976 * x1^4 * x2
  + 3174481200818981/144115188075855872 * x0^3 * x2^2
  + 1482729396195081/144115188075855872 * x0^2 * x1 * x2^2
  + 5216221190784717/288230376151711744 * x0 * x1^2 * x2^2
  + 3375264909880467/288230376151711744 * x1^3 * x2^2
  + -4491075501107665/576460752303423488 * x0^2 * x2^3
  + -6491867889918691/576460752303423488 * x0 * x1 * x2^3
  + -3156515902084423/1152921504606846976 * x1^2 * x2^3
  + 587959453866855/18014398509481984 * x0 * x2^4
  + 626287535153047/36028797018963968 * x1 * x2^4
  + -6839312791136951/1152921504606846976 * x2^5
  + 8575149298497673/18014398509481984 * x0^6
  + -6403744833384659/576460752303423488 * x0^5 * x1
  + 2761288183452469/9007199254740992 * x0^4 * x1^2
  + -2350891946469789/288230376151711744 * x0^3 * x1^3
  + 2723869394887311/9007199254740992 * x0^2 * x1^4
  + -2511180340502535/288230376151711744 * x0 * x1^5
  + 1125063779409965/2251799813685248 * x1^6
  + 3269968901210381/9223372036854775808 * x0^5 * x2
  + 879061719343631/144115188075855872 * x0^4 * x1 * x2
  + 4120965308911029/1152921504606846976 * x0^3 * x1^2 * x2
  + 3370217006239137/576460752303423488 * x0^2 * x1^3 * x2
  + 749636080661963/576460752303423488 * x0 * x1^4 * x2
  + 1606491046473497/1152921504606846976 * x1^5 * x2
  + 1386564550934495/4503599627370496 * x0^4 * x2^2
  + -2263644535374275/288230376151711744 * x0^3 * x1 * x2^2
  + 3360713600958481/18014398509481984 * x0^2 * x1^2 * x2^2
  + -864218554108373/144115188075855872 * x0 * x1^3 * x2^2
  + 1431170695578227/4503599627370496 * x1^4 * x2^2
  + 5443413620654783/2305843009213693952 * x0^3 * x2^3
  + 3194358823401573/576460752303423488 * x0^2 * x1 * x2^3
  + 4609615083283067/2305843009213693952 * x0 * x1^2 * x2^3
  + -3049372519401391/147573952589676412928 * x1^3 * x2^3
  + 340497610661357/1125899906842624 * x0^2 * x2^4
  + -652670505581999/72057594037927936 * x0 * x1 * x2^4
  + 5694497591327973/18014398509481984 * x1^2 * x2^4
  + -3435692410879851/1152921504606846976 * x0 * x2^5
  + 6104700257005677/9223372036854775808 * x1 * x2^5
  + 571426229891639/1125899906842624 * x2^6.
  
Let ind1_sigma x0 x1 x2 :=
  6444365281217903/9007199254740992
  + 3156132631819233/288230376151711744 * x0
  + 6621776381850747/144115188075855872 * x1
  + -5935890009598145/144115188075855872 * x2
  + 75507755864655/140737488355328 * x0^2
  + 686553846342323/288230376151711744 * x0 * x1
  + 5399350334328357/9007199254740992 * x1^2
  + 5551734769078667/144115188075855872 * x0 * x2
  + 6483681914041837/576460752303423488 * x1 * x2
  + 2659792549904989/4503599627370496 * x2^2
  + 4234313398200443/36028797018963968 * x0^3
  + 7324243373267667/72057594037927936 * x0^2 * x1
  + 2551004632443647/18014398509481984 * x0 * x1^2
  + 1779867344445251/18014398509481984 * x1^3
  + -2839627028199211/36028797018963968 * x0^2 * x2
  + -7080657708925815/144115188075855872 * x0 * x1 * x2
  + -5125926401408679/144115188075855872 * x1^2 * x2
  + 5769433788910579/36028797018963968 * x0 * x2^2
  + 7548762259734639/72057594037927936 * x1 * x2^2
  + -7077227790444981/144115188075855872 * x2^3
  + 5315158162444371/4503599627370496 * x0^4
  + -7420695018252797/36028797018963968 * x0^3 * x1
  + 1278883791720289/1125899906842624 * x0^2 * x1^2
  + -432837450195495/1125899906842624 * x0 * x1^3
  + 3642022124341929/2251799813685248 * x1^4
  + 5263524723041273/36028797018963968 * x0^3 * x2
  + 4633222373508539/576460752303423488 * x0^2 * x1 * x2
  + 7326693427311283/72057594037927936 * x0 * x1^2 * x2
  + 6969387668740601/72057594037927936 * x1^3 * x2
  + 8490037865227673/9007199254740992 * x0^2 * x2^2
  + -2828209639928901/18014398509481984 * x0 * x1 * x2^2
  + 4648349363321135/4503599627370496 * x1^2 * x2^2
  + 1916575920639541/9007199254740992 * x0 * x2^3
  + 5883596642560433/144115188075855872 * x1 * x2^3
  + 1944708727665587/1125899906842624 * x2^4.
  
Let ind1_sigma1 x0 x1 x2 :=
  4476897568399147/9007199254740992
  + -3540978292250963/36028797018963968 * x0
  + -1011907123644657/36028797018963968 * x1
  + -5081574377625259/576460752303423488 * x2
  + 1504524750412413/4503599627370496 * x0^2
  + -7715671717567329/288230376151711744 * x0 * x1
  + 8383324917575979/18014398509481984 * x1^2
  + -685941594988171/36028797018963968 * x0 * x2
  + 2997975129483811/1152921504606846976 * x1 * x2
  + 8282785250929401/18014398509481984 * x2^2
  + -8668450106807929/144115188075855872 * x0^3
  + -911324550712013/72057594037927936 * x0^2 * x1
  + 1839379008952559/144115188075855872 * x0 * x1^2
  + 2513546562414505/288230376151711744 * x1^3
  + -717353212571601/36028797018963968 * x0^2 * x2
  + -1617124157355299/576460752303423488 * x0 * x1 * x2
  + -8506336855728613/2305843009213693952 * x1^2 * x2
  + 5676864418775855/576460752303423488 * x0 * x2^2
  + 6398208699939935/576460752303423488 * x1 * x2^2
  + -3686553543924713/288230376151711744 * x2^3
  + 2832741523545251/4503599627370496 * x0^4
  + -3282692650676005/72057594037927936 * x0^3 * x1
  + 4732242544488397/9007199254740992 * x0^2 * x1^2
  + -443193334415597/9007199254740992 * x0 * x1^3
  + 7119338261066303/9007199254740992 * x1^4
  + -1480065797998891/72057594037927936 * x0^3 * x2
  + 5505224646684249/288230376151711744 * x0^2 * x1 * x2
  + -3581037701281061/9223372036854775808 * x0 * x1^2 * x2
  + 8665399119526849/576460752303423488 * x1^3 * x2
  + 4612905089389381/9007199254740992 * x0^2 * x2^2
  + -5771178546452587/144115188075855872 * x0 * x1 * x2^2
  + 2479455543572859/4503599627370496 * x1^2 * x2^2
  + 7429551612441657/1152921504606846976 * x0 * x2^3
  + 4558527826464815/288230376151711744 * x1 * x2^3
  + 7005183250778427/9007199254740992 * x2^4
  + -8298022908586511/72057594037927936 * x0^5
  + -6995141011418167/72057594037927936 * x0^4 * x1
  + -3627646455715995/36028797018963968 * x0^3 * x1^2
  + -282256961117581/4503599627370496 * x0^2 * x1^3
  + -5029603307347193/36028797018963968 * x0 * x1^4
  + -3957331428030851/72057594037927936 * x1^5
  + 4008775504832179/72057594037927936 * x0^4 * x2
  + 4698958294066613/72057594037927936 * x0^3 * x1 * x2
  + 6643594431183903/288230376151711744 * x0^2 * x1^2 * x2
  + 5628209625126387/72057594037927936 * x0 * x1^3 * x2
  + 8154564301689153/576460752303423488 * x1^4 * x2
  + -4976112633636495/36028797018963968 * x0^3 * x2^2
  + -4385771798942137/72057594037927936 * x0^2 * x1 * x2^2
  + -4640037064984295/36028797018963968 * x0 * x1^2 * x2^2
  + -4806722763215831/72057594037927936 * x1^3 * x2^2
  + 4375085894654051/144115188075855872 * x0^2 * x2^3
  + 2364776781378185/36028797018963968 * x0 * x1 * x2^3
  + 7939122053136189/576460752303423488 * x1^2 * x2^3
  + -1753761069466705/9007199254740992 * x0 * x2^4
  + -7613398074055751/72057594037927936 * x1 * x2^4
  + 1195520686250779/288230376151711744 * x2^5
  + 1788514078226417/36028797018963968 * x0^6
  + 4511872077816349/72057594037927936 * x0^5 * x1
  + 4655591819843991/72057594037927936 * x0^4 * x1^2
  + 4608448381209553/72057594037927936 * x0^3 * x1^3
  + 7553102807714009/144115188075855872 * x0^2 * x1^4
  + 5657632635746643/144115188075855872 * x0 * x1^5
  + 8295540506774557/576460752303423488 * x1^6
  + -4956636040633991/144115188075855872 * x0^5 * x2
  + -1465441607282217/36028797018963968 * x0^4 * x1 * x2
  + -5385581057688171/144115188075855872 * x0^3 * x1^2 * x2
  + -7214734708687421/144115188075855872 * x0^2 * x1^3 * x2
  + -2266095649325479/72057594037927936 * x0 * x1^4 * x2
  + -8929442929874779/1152921504606846976 * x1^5 * x2
  + 1156267167521759/18014398509481984 * x0^4 * x2^2
  + 2124599505168877/36028797018963968 * x0^3 * x1 * x2^2
  + 3898371311847633/72057594037927936 * x0^2 * x1^2 * x2^2
  + 6805340245852393/144115188075855872 * x0 * x1^3 * x2^2
  + 4974376327608429/288230376151711744 * x1^4 * x2^2
  + -4565817895749785/144115188075855872 * x0^3 * x2^3
  + -6389150420379807/144115188075855872 * x0^2 * x1 * x2^3
  + -1849144206066109/72057594037927936 * x0 * x1^2 * x2^3
  + -6725007903057381/1152921504606846976 * x1^3 * x2^3
  + 2044385283643965/36028797018963968 * x0^2 * x2^4
  + 8078528346464631/144115188075855872 * x0 * x1 * x2^4
  + 2390651127113085/144115188075855872 * x1^2 * x2^4
  + -1784738695819225/288230376151711744 * x0 * x2^5
  + -5156218193404067/2305843009213693952 * x1 * x2^5
  + 732998541255431/576460752303423488 * x2^6.

Lemma init_pos (x0 x1 x2 : R) :
  p x0 x1 x2
  - init_sigma1 x0 x1 x2 * pI1 x0 x1 x2
  - init_sigma2 x0 x1 x2 * pI2 x0 x1 x2
  - init_sigma3 x0 x1 x2 * pI3 x0 x1 x2 >= 0.
Proof.
rewrite /p /init_sigma1 /pI1 /init_sigma2 /pI2 /init_sigma3 /pI3.
validsdp.
Qed.

Lemma init_sigma1_pos (x0 x1 x2 : R) : init_sigma1 x0 x1 x2 >= 0.
Proof. rewrite /init_sigma1. validsdp. Qed.

Lemma init_sigma2_pos (x0 x1 x2 : R) : init_sigma2 x0 x1 x2 >= 0.
Proof. rewrite /init_sigma2. validsdp. Qed.

Lemma init_sigma3_pos (x0 x1 x2 : R) : init_sigma3 x0 x1 x2 >= 0.
Proof. rewrite /init_sigma3. validsdp. Qed.

Lemma ind0_pos (x0 x1 x2 : R) :
  p (t0_x0 x0 x1 x2) (t0_x1 x0 x1 x2) (t0_x2 x0 x1 x2)
  - ind0_sigma x0 x1 x2 * p x0 x1 x2
  - ind0_sigma0 x0 x1 x2 * g0 x0 x1 x2 >= 0.
Proof.
rewrite /p /t0_x0 /t0_x1 /t0_x2 /ind0_sigma /ind0_sigma0 /g0.
validsdp.
Qed.

Lemma ind0_sigma_pos (x0 x1 x2 : R) : ind0_sigma x0 x1 x2 >= 0.
Proof. rewrite /ind0_sigma. validsdp. Qed.

Lemma ind0_sigma0_pos (x0 x1 x2 : R) : ind0_sigma0 x0 x1 x2 >= 0.
Proof. rewrite /ind0_sigma0. validsdp. Qed.

Lemma ind1_pos (x0 x1 x2 : R) :
  p (t1_x0 x0 x1 x2) (t1_x1 x0 x1 x2) (t1_x2 x0 x1 x2)
  - ind1_sigma x0 x1 x2 * p x0 x1 x2
  - ind1_sigma1 x0 x1 x2 * g1 x0 x1 x2 >= 0.
Proof.
rewrite /p /t1_x0 /t1_x1 /t1_x2 /ind1_sigma /ind1_sigma1 /g1.
validsdp.
Qed.

Lemma ind1_sigma_pos (x0 x1 x2 : R) : ind1_sigma x0 x1 x2 >= 0.
Proof. rewrite /ind1_sigma. validsdp. Qed.

Lemma ind1_sigma1_pos (x0 x1 x2 : R) : ind1_sigma1 x0 x1 x2 >= 0.
Proof. rewrite /ind1_sigma1. validsdp. Qed.

Theorem init (x0 x1 x2 : R) :
  pI1 x0 x1 x2 >= 0 -> pI2 x0 x1 x2 >= 0 -> pI3 x0 x1 x2 >= 0 ->
  p x0 x1 x2 >= 0.
Proof.
move=> H1 H2 H3.
apply (Rge_trans _ (p x0 x1 x2 - init_sigma1 x0 x1 x2 * pI1 x0 x1 x2)).
{ rewrite -{1}(Rminus_0_r (p _ _ _)).
  apply Rplus_ge_compat_l, Ropp_ge_contravar.
  by apply Rle_ge, Rmult_le_pos; apply Rge_le; [apply init_sigma1_pos|]. }
apply (Rge_trans _ (p x0 x1 x2 - init_sigma1 x0 x1 x2 * pI1 x0 x1 x2
                    - init_sigma2 x0 x1 x2 * pI2 x0 x1 x2)).
{ rewrite -{1}(Rminus_0_r (_ - _)).
  apply Rplus_ge_compat_l, Ropp_ge_contravar.
  by apply Rle_ge, Rmult_le_pos; apply Rge_le; [apply init_sigma2_pos|]. }
apply (Rge_trans _ (p x0 x1 x2 - init_sigma1 x0 x1 x2 * pI1 x0 x1 x2
                    - init_sigma2 x0 x1 x2 * pI2 x0 x1 x2
                    - init_sigma3 x0 x1 x2 * pI3 x0 x1 x2)).
{ rewrite -{1}(Rminus_0_r (_ - _)).
  apply Rplus_ge_compat_l, Ropp_ge_contravar.
  by apply Rle_ge, Rmult_le_pos; apply Rge_le; [apply init_sigma3_pos|]. }
apply init_pos.
Qed.

Theorem ind0 (x0 x1 x2 : R) :
  p x0 x1 x2 >= 0 -> g0 x0 x1 x2 >= 0 -> 
  p (t0_x0 x0 x1 x2) (t0_x1 x0 x1 x2) (t0_x2 x0 x1 x2) >= 0.
Proof.
move=> H1 H2.
apply (Rge_trans _ (p (t0_x0 x0 x1 x2) (t0_x1 x0 x1 x2) (t0_x2 x0 x1 x2)
                    - ind0_sigma x0 x1 x2 * p x0 x1 x2)).
{ rewrite -{1}(Rminus_0_r (p _ _ _)).
  apply Rplus_ge_compat_l, Ropp_ge_contravar.
  by apply Rle_ge, Rmult_le_pos; apply Rge_le; [apply ind0_sigma_pos|]. }
apply (Rge_trans _ (p (t0_x0 x0 x1 x2) (t0_x1 x0 x1 x2) (t0_x2 x0 x1 x2)
                    - ind0_sigma x0 x1 x2 * p x0 x1 x2
                    - ind0_sigma0 x0 x1 x2 * g0 x0 x1 x2)).
{ rewrite -{1}(Rminus_0_r (_ - _)).
  apply Rplus_ge_compat_l, Ropp_ge_contravar.
  by apply Rle_ge, Rmult_le_pos; apply Rge_le; [apply ind0_sigma0_pos|]. }
apply ind0_pos.
Qed.

Theorem ind1 (x0 x1 x2 : R) :
  p x0 x1 x2 >= 0 -> g1 x0 x1 x2 >= 0 ->
  p (t1_x0 x0 x1 x2) (t1_x1 x0 x1 x2) (t1_x2 x0 x1 x2) >= 0.
Proof.
move=> H1 H2.
apply (Rge_trans _ (p (t1_x0 x0 x1 x2) (t1_x1 x0 x1 x2) (t1_x2 x0 x1 x2)
                    - ind1_sigma x0 x1 x2 * p x0 x1 x2)).
{ rewrite -{1}(Rminus_0_r (p _ _ _)).
  apply Rplus_ge_compat_l, Ropp_ge_contravar.
  by apply Rle_ge, Rmult_le_pos; apply Rge_le; [apply ind1_sigma_pos|]. }
apply (Rge_trans _ (p (t1_x0 x0 x1 x2) (t1_x1 x0 x1 x2) (t1_x2 x0 x1 x2)
                    - ind1_sigma x0 x1 x2 * p x0 x1 x2
                    - ind1_sigma1 x0 x1 x2 * g1 x0 x1 x2)).
{ rewrite -{1}(Rminus_0_r (_ - _)).
  apply Rplus_ge_compat_l, Ropp_ge_contravar.
  by apply Rle_ge, Rmult_le_pos; apply Rge_le; [apply ind1_sigma1_pos|]. }
apply ind1_pos.
Qed.
