From mathcomp Require Import ssreflect.
Require Import Reals.
From ValidSDP Require Import validsdp.

Local Open Scope R_scope.

(* Attempt to prove that p >= 0 with p below is an
 * inductive invariant, for the program
 *
x1 = rand(-1.0, 1.0);
x2 = rand(-1.0, 1.0);
while (-1 <= 0) {
  pre_x1 = x1; pre_x2 = x2;
  if (x2 <= x1) {
    x1 = 0.687 * pre_x1 + 0.558 * pre_x2 - 0.0001 * pre_x1 * pre_x2;
    x2 = -0.292 * pre_x1 + 0.773 * pre_x2;
  } else {
    x1 = 0.369 * pre_x1 + 0.532 * pre_x2 - 0.0001 * pre_x1^2;
    x2 = -1.27 * pre_x1 + 0.12 * pre_x2 - 0.0001 * pre_x1 * pre_x2;
  }
}
 *)

(* initial condition -1 <= x1 <= 1 encoded as (x1 - 1)*(1 - x1) (>= 0) *)
Let pI1 (x0 x1 : R) := (x0 - 1) * (1 - x0).
(* initial condition -1 <= x2 <= 1 *)
Let pI2 (x0 x1 : R) := (x1 - 1) * (1 - x1).
(* guard x2 <= x1 (then branch) *)
Let g0 x0 x1 := x0 - x1.
(* assignment in then branch *)
Let t0_x0 (x0 x1 : R) := 687 / 1000 * x0 + 558 / 1000 * x1 - 1 / 10000 * x0 * x1.
Let t0_x1 (x0 x1 : R) := (-292) / 1000 * x0 + 773 / 1000 * x1.
(* guard x2 >= x1 (else branch) *)
Let g1 x0 x1 := x1 - x0.
(* assignment in else branch *)
Let t1_x0 (x0 x1 : R) := 369 / 1000 * x0 + 532 / 1000 * x1 - 1 / 10000 * x0^2.
Let t1_x1 (x0 x1 : R) := (-127) / 100 * x0 + 12 / 100 * x1 - 1 / 10000 * x0 * x1.

Let p x0 x1 :=
  43123995072955912711/36893488147419103232
  + -6493559060491613/36893488147419103232 * x0^2
  + -884358362916423/18446744073709551616 * x0 * x1
  + -329763399056887/2305843009213693952 * x1^2
  + 149369550536191/36028797018963968 * x0^3
  + -4819241860629567/1152921504606846976 * x0^2 * x1
  + 3774600809056775/18446744073709551616 * x0 * x1^2
  + 3477006688641869/576460752303423488 * x1^3
  + -2244128971873147/9007199254740992 * x0^4
  + 4574509311614721/144115188075855872 * x0^3 * x1
  + -6453401090263411/36028797018963968 * x0^2 * x1^2
  + -2327838197255863/18014398509481984 * x0 * x1^3
  + -4964084993090941/36028797018963968 * x1^4
  + 5486717873434055/144115188075855872 * x0^5
  + -4029537496858215/36028797018963968 * x0^4 * x1
  + 3706449024899855/72057594037927936 * x0^3 * x1^2
  + 5038037496106181/288230376151711744 * x0^2 * x1^3
  + -5974525409517511/1152921504606846976 * x0 * x1^4
  + 5103977388721617/576460752303423488 * x1^5
  + -753920111973975/4503599627370496 * x0^6
  + 3618774720693301/18014398509481984 * x0^5 * x1
  + -920777858888785/4503599627370496 * x0^4 * x1^2
  + -796747567427347/4503599627370496 * x0^3 * x1^3
  + -1135212076048177/18014398509481984 * x0^2 * x1^4
  + -5945996449005367/144115188075855872 * x0 * x1^5
  + -858047383543717/18014398509481984 * x1^6.
  
Let init_sigma1 x0 x1 :=
  3794382233569935/70368744177664 + 8838396220338213/562949953421312 * 
  x0 + 7672547593537635/562949953421312 * x1
  + 6888614441818585/140737488355328 * x0^2
  + 7665825577013621/562949953421312 * x0 * x1
  + 6713223538331131/140737488355328 * x1^2
  + 7042192161342941/281474976710656 * x0^3
  + 1257850257308805/70368744177664 * x0^2 * x1
  + 608026530778251/35184372088832 * x0 * x1^2
  + 6902072635255163/562949953421312 * x1^3
  + 8796744574011467/140737488355328 * x0^4
  + 7376473732998011/4503599627370496 * x0^3 * x1
  + 6687548242514859/140737488355328 * x0^2 * x1^2
  + 915343378078891/140737488355328 * x0 * x1^3
  + 8039782533627401/140737488355328 * x1^4.
  
Let init_sigma2 x0 x1 :=
  3772637489409731/70368744177664 + 7325892785484519/562949953421312 * 
  x0 + 4261192457451031/281474976710656 * x1
  + 6596665239695783/140737488355328 * x0^2
  + 7152052506471255/562949953421312 * x0 * x1
  + 3404119063441001/70368744177664 * x1^2
  + 6511148554726433/562949953421312 * x0^3
  + 2295279090620869/140737488355328 * x0^2 * x1
  + 4826484465168059/281474976710656 * x0 * x1^2
  + 1716497480919113/70368744177664 * x1^3
  + 1997363940832131/35184372088832 * x0^4
  + 6243682094268577/1125899906842624 * x0^3 * x1
  + 6562716492402153/140737488355328 * x0^2 * x1^2
  + 7604718539830369/4503599627370496 * x0 * x1^3
  + 8740797114162033/140737488355328 * x1^4.
  
Let ind0_sigma x0 x1 :=
  7882766701185221/18014398509481984
  + -5543720645610119/1125899906842624 * x0
  + 2711244810631427/562949953421312 * x1
  + 430560279279665/17592186044416 * x0^2
  + -6565950552116371/140737488355328 * x0 * x1
  + 6830558801770193/281474976710656 * x1^2
  + -2783816529758377/70368744177664 * x0^3
  + 4632391088118401/35184372088832 * x0^2 * x1
  + -2423636470851867/17592186044416 * x0 * x1^2
  + 6495744440155621/140737488355328 * x1^3
  + 7631327274806695/281474976710656 * x0^4
  + -5099900375458235/35184372088832 * x0^3 * x1
  + 8380807035274927/35184372088832 * x0^2 * x1^2
  + -5971745267766649/35184372088832 * x0 * x1^3
  + 2939417826339715/70368744177664 * x1^4
  + -3322052767764681/281474976710656 * x0^5
  + 4723364137988365/70368744177664 * x0^4 * x1
  + -5458092823659781/35184372088832 * x0^3 * x1^2
  + 6004180839076511/35184372088832 * x0^2 * x1^3
  + -6352443988287373/70368744177664 * x0 * x1^4
  + 1345057191245553/70368744177664 * x1^5
  + 5143248780389065/1125899906842624 * x0^6
  + -838992417441531/70368744177664 * x0^5 * x1
  + 4729472403153793/140737488355328 * x0^4 * x1^2
  + -6951496884059151/140737488355328 * x0^3 * x1^3
  + 371811400556275/8796093022208 * x0^2 * x1^4
  + -73837013498087/4398046511104 * x0 * x1^5
  + 66721677603345/17592186044416 * x1^6.
  
Let ind0_sigma0 x0 x1 :=
  5350747328902393/562949953421312 + -6586577606946019/140737488355328 * 
  x0 + 1664949407468055/35184372088832 * x1
  + 3245565881494425/35184372088832 * x0^2
  + -3533920021788735/17592186044416 * x0 * x1
  + 1732908705936423/17592186044416 * x1^2
  + -6881830636446575/70368744177664 * x0^3
  + 2634512118280651/8796093022208 * x0^2 * x1
  + -5555428377970843/17592186044416 * x0 * x1^2
  + 8050001480176233/70368744177664 * x1^3
  + 5488132768597227/70368744177664 * x0^4
  + -3622422114989263/17592186044416 * x0^3 * x1
  + 5311765155108325/17592186044416 * x0^2 * x1^2
  + -1148198382713129/4398046511104 * x0 * x1^3
  + 7398697051431709/70368744177664 * x1^4
  + -3780869250623109/70368744177664 * x0^5
  + 4800943611864753/35184372088832 * x0^4 * x1
  + -4883126276114395/70368744177664 * x0^3 * x1^2
  + 959130274239401/8796093022208 * x0^2 * x1^3
  + -8010041795722247/35184372088832 * x0 * x1^4
  + 3573856038317629/35184372088832 * x1^5
  + 3137817889282447/140737488355328 * x0^6
  + -6383427868853719/35184372088832 * x0^5 * x1
  + 7541682532365851/70368744177664 * x0^4 * x1^2
  + 1852519886246313/17592186044416 * x0^3 * x1^3
  + 3729628427854629/35184372088832 * x0^2 * x1^4
  + -4798313291817739/17592186044416 * x0 * x1^5
  + 6039648745554081/70368744177664 * x1^6
  + -1843163283394553/281474976710656 * x0^7
  + 2972560107624737/17592186044416 * x0^6 * x1
  + -663784052760941/2199023255552 * x0^5 * x1^2
  + 7011053419534437/140737488355328 * x0^4 * x1^3
  + 4559738629109601/70368744177664 * x0^3 * x1^4
  + 3694707385853071/17592186044416 * x0^2 * x1^5
  + -8022260470064747/35184372088832 * x0 * x1^6
  + 7135900172472363/140737488355328 * x1^7
  + 5074978260032043/562949953421312 * x0^8
  + -2927817519667475/35184372088832 * x0^7 * x1
  + 4504422936150971/17592186044416 * x0^6 * x1^2
  + -4187178868106175/17592186044416 * x0^5 * x1^3
  + 7814842429232755/2251799813685248 * x0^4 * x1^4
  + -8205269162293103/281474976710656 * x0^3 * x1^5
  + 5890191513905227/35184372088832 * x0^2 * x1^6
  + -3738714867537779/35184372088832 * x0 * x1^7
  + 5587030110253787/281474976710656 * x1^8
  + -591182358264257/70368744177664 * x0^9
  + 6363794189410451/281474976710656 * x0^8 * x1
  + -6356823462822907/70368744177664 * x0^7 * x1^2
  + 2569561905183473/17592186044416 * x0^6 * x1^3
  + -2701545471754301/35184372088832 * x0^5 * x1^4
  + -4929598029340229/1125899906842624 * x0^4 * x1^5
  + -4532298053558673/140737488355328 * x0^3 * x1^6
  + 4185525496611059/70368744177664 * x0^2 * x1^7
  + -7230437284002881/281474976710656 * x0 * x1^8
  + 5682241042460215/1125899906842624 * x1^9
  + 2995555312262063/1125899906842624 * x0^10
  + -3650435988101315/1125899906842624 * x0^9 * x1
  + 438348688966885/35184372088832 * x0^8 * x1^2
  + -874529863855287/35184372088832 * x0^7 * x1^3
  + 8315015970419277/281474976710656 * x0^6 * x1^4
  + -3075165217077573/562949953421312 * x0^5 * x1^5
  + 5651211648675783/9007199254740992 * x0^4 * x1^6
  + -7645559668277825/1125899906842624 * x0^3 * x1^7
  + 1174511296186445/140737488355328 * x0^2 * x1^8
  + -5616665420840019/2251799813685248 * x0 * x1^9
  + 1523893997918323/2251799813685248 * x1^10.
  
Let ind1_sigma x0 x1 :=
  2570294137101961/9007199254740992 + 6457541758152751/2251799813685248 * 
  x0 + -1462793763934913/562949953421312 * x1
  + 2649398679780545/140737488355328 * x0^2
  + -2454218799289623/70368744177664 * x0 * x1
  + 5295603020662479/281474976710656 * x1^2
  + 2908156283884043/70368744177664 * x0^3
  + -4463858178367249/35184372088832 * x0^2 * x1
  + 4462404633459439/35184372088832 * x0 * x1^2
  + -2989702496207935/70368744177664 * x1^3
  + 3341062253225313/70368744177664 * x0^4
  + -6492468457766539/35184372088832 * x0^3 * x1
  + 142964574451617/549755813888 * x0^2 * x1^2
  + -3067703213878061/17592186044416 * x0 * x1^3
  + 5979697631413045/140737488355328 * x1^4
  + 2308623066523437/70368744177664 * x0^5
  + -2146718569484341/17592186044416 * x0^4 * x1
  + 926874220864827/4398046511104 * x0^3 * x1^2
  + -6954888706390711/35184372088832 * x0^2 * x1^3
  + 6897805449866847/70368744177664 * x0 * x1^4
  + -2899934358579499/140737488355328 * x1^5
  + 93447884095105/8796093022208 * x0^6
  + -4523007529220583/140737488355328 * x0^5 * x1
  + 8567576888439971/140737488355328 * x0^4 * x1^2
  + -4750609626940517/70368744177664 * x0^3 * x1^3
  + 7097150978482981/140737488355328 * x0^2 * x1^4
  + -5238940097118969/281474976710656 * x0 * x1^5
  + 1207209882478077/281474976710656 * x1^6.
  
Let ind1_sigma1 x0 x1 :=
  1229313584501077/140737488355328 + 5790437114739475/140737488355328 * 
  x0 + -378693489744703/8796093022208 * x1
  + 1436360616473137/17592186044416 * x0^2
  + -6405957616651561/35184372088832 * x0 * x1
  + 6068868845052605/70368744177664 * x1^2
  + 3424242885941611/35184372088832 * x0^3
  + -4777113427173823/17592186044416 * x0^2 * x1
  + 149281738172099/549755813888 * x0 * x1^2
  + -1566368389091605/17592186044416 * x1^3
  + 6546983160389135/70368744177664 * x0^4
  + -3290496964039839/17592186044416 * x0^3 * x1
  + 8984621045366821/35184372088832 * x0^2 * x1^2
  + -6301540534232991/35184372088832 * x0 * x1^3
  + 5136896918360639/70368744177664 * x1^4
  + 1191817196816729/17592186044416 * x0^5
  + -7701821155894341/70368744177664 * x0^4 * x1
  + 895231658081769/17592186044416 * x0^3 * x1^2
  + -3700256407089709/70368744177664 * x0^2 * x1^3
  + 1166157051452693/8796093022208 * x0 * x1^4
  + -1399671476050791/17592186044416 * x1^5
  + 5622007196709659/140737488355328 * x0^6
  + -4756664992155475/35184372088832 * x0^5 * x1
  + 1888003274219839/70368744177664 * x0^4 * x1^2
  + 37530782488741/549755813888 * x0^3 * x1^3
  + 7829505592135315/140737488355328 * x0^2 * x1^4
  + -3644085619098823/17592186044416 * x0 * x1^5
  + 5596650033728449/70368744177664 * x1^6
  + 7040960972391841/140737488355328 * x0^7
  + -194115648168855/1099511627776 * x0^6 * x1
  + 2436946843115861/17592186044416 * x0^5 * x1^2
  + -5376169517516307/281474976710656 * x0^4 * x1^3
  + 2435663171193649/9007199254740992 * x0^3 * x1^4
  + -3094601047573599/17592186044416 * x0^2 * x1^5
  + 3554018575562279/17592186044416 * x0 * x1^6
  + -3647646353199495/70368744177664 * x1^7
  + 2143945581335049/35184372088832 * x0^8
  + -5954548837389921/35184372088832 * x0^7 * x1
  + 6214199253434833/35184372088832 * x0^6 * x1^2
  + -3589106053001829/35184372088832 * x0^5 * x1^3
  + 2871961146283599/70368744177664 * x0^4 * x1^4
  + -8877972621140669/140737488355328 * x0^3 * x1^5
  + 2676458147859007/17592186044416 * x0^2 * x1^6
  + -3584990366405797/35184372088832 * x0 * x1^7
  + 6002202857252787/281474976710656 * x1^8
  + 2509611122245955/70368744177664 * x0^9
  + -6749996260724493/70368744177664 * x0^8 * x1
  + 8340799420559579/70368744177664 * x0^7 * x1^2
  + -4903785271088757/70368744177664 * x0^6 * x1^3
  + 7210065096100585/140737488355328 * x0^5 * x1^4
  + -6815116024230399/281474976710656 * x0^4 * x1^5
  + 5407038170794905/140737488355328 * x0^3 * x1^6
  + -1978567721288163/35184372088832 * x0^2 * x1^7
  + 7366455384377323/281474976710656 * x0 * x1^8
  + -6235461210180393/1125899906842624 * x1^9
  + 4447954802113863/562949953421312 * x0^10
  + -6340711394595205/281474976710656 * x0^9 * x1
  + 300492763539113/8796093022208 * x0^8 * x1^2
  + -2463100436819851/140737488355328 * x0^7 * x1^3
  + 4658653921855469/281474976710656 * x0^6 * x1^4
  + -5610230359600369/562949953421312 * x0^5 * x1^5
  + 2512528261819703/562949953421312 * x0^4 * x1^6
  + -8199053922220055/1125899906842624 * x0^3 * x1^7
  + 2330411619973823/281474976710656 * x0^2 * x1^8
  + -6001327549794913/2251799813685248 * x0 * x1^9
  + 423723792467905/562949953421312 * x1^10.
  
Lemma init_pos (x0 x1 : R) :
  p x0 x1
  - init_sigma1 x0 x1 * pI1 x0 x1
  - init_sigma2 x0 x1 * pI2 x0 x1 >= 0.
Proof.
rewrite /p /init_sigma1 /pI1 /init_sigma2 /pI2.
validsdp.
Qed.

Lemma init_sigma1_pos (x0 x1 : R) : init_sigma1 x0 x1 >= 0.
Proof. rewrite /init_sigma1. validsdp. Qed.

Lemma init_sigma2_pos (x0 x1 : R) : init_sigma2 x0 x1 >= 0.
Proof. rewrite /init_sigma2. validsdp. Qed.

Lemma ind0_pos (x0 x1 : R) :
  p (t0_x0 x0 x1) (t0_x1 x0 x1)
  - ind0_sigma x0 x1 * p x0 x1
  - ind0_sigma0 x0 x1 * g0 x0 x1 >= 0.
Proof.
rewrite /p /t0_x0 /t0_x1 /ind0_sigma /ind0_sigma0 /g0.
validsdp.
Qed.

Lemma ind0_sigma_pos (x0 x1 : R) : ind0_sigma x0 x1 >= 0.
Proof. rewrite /ind0_sigma. validsdp. Qed.

Lemma ind0_sigma0_pos (x0 x1 : R) : ind0_sigma0 x0 x1 >= 0.
Proof. rewrite /ind0_sigma0. validsdp. Qed.

Lemma ind1_pos (x0 x1 : R) :
  p (t1_x0 x0 x1) (t1_x1 x0 x1)
  - ind1_sigma x0 x1 * p x0 x1
  - ind1_sigma1 x0 x1 * g1 x0 x1 >= 0.
Proof.
rewrite /p /t1_x0 /t1_x1 /ind1_sigma /ind1_sigma1 /g1.
validsdp.
Qed.

Lemma ind1_sigma_pos (x0 x1 : R) : ind1_sigma x0 x1 >= 0.
Proof. rewrite /ind1_sigma. validsdp. Qed.

Lemma ind1_sigma1_pos (x0 x1 : R) : ind1_sigma1 x0 x1 >= 0.
Proof. rewrite /ind1_sigma1. validsdp. Qed.

Theorem init (x0 x1 x2 : R) :
  pI1 x0 x1 >= 0 -> pI2 x0 x1 >= 0 ->
  p x0 x1 >= 0.
Proof.
move=> H1 H2.
apply (Rge_trans _ (p x0 x1 - init_sigma1 x0 x1 * pI1 x0 x1)).
{ rewrite -{1}(Rminus_0_r (p _ _)).
  apply Rplus_ge_compat_l, Ropp_ge_contravar.
  by apply Rle_ge, Rmult_le_pos; apply Rge_le; [apply init_sigma1_pos|]. }
apply (Rge_trans _ (p x0 x1 - init_sigma1 x0 x1 * pI1 x0 x1
                    - init_sigma2 x0 x1 * pI2 x0 x1)).
{ rewrite -{1}(Rminus_0_r (_ - _)).
  apply Rplus_ge_compat_l, Ropp_ge_contravar.
  by apply Rle_ge, Rmult_le_pos; apply Rge_le; [apply init_sigma2_pos|]. }
apply init_pos.
Qed.

Theorem ind0 (x0 x1 : R) :
  p x0 x1 >= 0 -> g0 x0 x1 >= 0 -> 
  p (t0_x0 x0 x1) (t0_x1 x0 x1) >= 0.
Proof.
move=> H1 H2.
apply (Rge_trans _ (p (t0_x0 x0 x1) (t0_x1 x0 x1)
                    - ind0_sigma x0 x1 * p x0 x1)).
{ rewrite -{1}(Rminus_0_r (p _ _)).
  apply Rplus_ge_compat_l, Ropp_ge_contravar.
  by apply Rle_ge, Rmult_le_pos; apply Rge_le; [apply ind0_sigma_pos|]. }
apply (Rge_trans _ (p (t0_x0 x0 x1) (t0_x1 x0 x1)
                    - ind0_sigma x0 x1 * p x0 x1
                    - ind0_sigma0 x0 x1 * g0 x0 x1)).
{ rewrite -{1}(Rminus_0_r (_ - _)).
  apply Rplus_ge_compat_l, Ropp_ge_contravar.
  by apply Rle_ge, Rmult_le_pos; apply Rge_le; [apply ind0_sigma0_pos|]. }
apply ind0_pos.
Qed.

Theorem ind1 (x0 x1 : R) :
  p x0 x1 >= 0 -> g1 x0 x1 >= 0 ->
  p (t1_x0 x0 x1) (t1_x1 x0 x1) >= 0.
Proof.
move=> H1 H2.
apply (Rge_trans _ (p (t1_x0 x0 x1) (t1_x1 x0 x1)
                    - ind1_sigma x0 x1 * p x0 x1)).
{ rewrite -{1}(Rminus_0_r (p _ _)).
  apply Rplus_ge_compat_l, Ropp_ge_contravar.
  by apply Rle_ge, Rmult_le_pos; apply Rge_le; [apply ind1_sigma_pos|]. }
apply (Rge_trans _ (p (t1_x0 x0 x1) (t1_x1 x0 x1)
                    - ind1_sigma x0 x1 * p x0 x1
                    - ind1_sigma1 x0 x1 * g1 x0 x1)).
{ rewrite -{1}(Rminus_0_r (_ - _)).
  apply Rplus_ge_compat_l, Ropp_ge_contravar.
  by apply Rle_ge, Rmult_le_pos; apply Rge_le; [apply ind1_sigma1_pos|]. }
apply ind1_pos.
Qed.
