(* Attempt to prove that p >= 0 with p at the end of this file is an
 * inductive invariant, for the program
 *
x1 = rand(0.9, 1.1);
x2 = rand(0, 0.2);
x3 = rand(0, 0.2);
x4 = rand(0, 0.2);
while (-1 <= 0) {
  pre_x1 = x1; pre_x2 = x2; pre_x3 = x3; pre_x4 = x4;
  if (x1^2 + x2^2 + x3^2 + x4^2 <= 1) {
    x1 = 0.25 * (0.8 * pre_x1^2 + 1.4 * pre_x2 - 0.5 * pre_x3^2);
    x2 = 0.25 * (1.3 * pre_x1 + 0.5 * pre_x2^2 - 0.8 * pre_x4^2);
    x3 = 0.25 * (0.8 * pre_x3^2 + 1.4 * pre_x4);
    x4 = 0.25 * (1.3 * pre_x3 + 0.5 * pre_x4^2);
  } else {
    x1 = 0.25 * (0.5 * pre_x1 + 0.4 * pre_x2^2);
    x2 = 0.25 * (-0.6 * pre_x1^2 + 0.3 * pre_x2^2);
    x3 = 0.25 * (0.5 * pre_x3 + 0.4 * pre_x4^2);
    x4 = 0.25 * (-0.6 * pre_x3 + 0.3 * pre_x4^2);
  }
}
 *)

(* This requires OSDP (>= 0.4.4, available from
 * https://cavale.enseeiht.fr/osdp/, must be compiled with MOSEK but
 * CSDP, SDPA, GLPK and Camlp4 are not required). To compile:
 *
 * % make
 *
 * and to run:
 *
 * % ./ex6_d6 *)

let solver_synth = Osdp.Sdp.Mosek
let solver_recheck = Osdp.Sdp.Mosek

module Sos = struct
  include Osdp.Sos.Q
  let ( / ) n m = Q.of_int n /. Q.of_int m
end

let options = { Sos.default with
                Sos.verbose = 0(*3*);
                Sos.sdp =
                  { Osdp.Sdp.default with
                    Osdp.Sdp.solver = solver_synth } }

let options_recheck = { Sos.default with
                        Sos.verbose = 0(*3*);
                        Sos.sdp =
                          { Osdp.Sdp.default with
                            Osdp.Sdp.solver = solver_recheck } }

let print_poly = false

let x1, x2, x3, x4 = Sos.(??0, ??1, ??2, ??3)

(* initial condition 0.9 <= x1 <= 1.1 encoded as (x1 - 0.9)*(1.1 - x1) (>= 0) *)
let pI1 = Sos.((x1 - 9 / 10) * (11 / 10 - x1))
(* initial condition 0 <= x2 <= 0.2 *)
let pI2 = Sos.(x2 * (2 / 10 - x2))
(* initial condition 0 <= x3 <= 0.2 *)
let pI3 = Sos.(x3 * (2 / 10 - x3))
(* initial condition 0 <= x4 <= 0.2 *)
let pI4 = Sos.(x4 * (2 / 10 - x4))
(* guard x1^2 + x2^2 + x3^2 + x4^2 <= 1 (then branch) *)
let g0 = Sos.(1 / 1 - (x1**2 + x2**2 + x3**2 + x4**2))
(* assignment in then branch *)
let t0 = Sos.([1 / 4 * (8 / 10 * x1**2 + 14 / 10 * x2 - 5 / 10 * x3**2);
               1 / 4 * (13 / 10 * x1 + 5 / 10 * x2**2 - 8 / 10 * x4**2);
               1 / 4 * (8 / 10 * x3**2 + 14 / 10 * x4);
               1 / 4 * (13 / 10 * x3 + 5 / 10 * x4**2)])

(* guard x1^2 + x2^2 + x3^2 + x4^2 >= 1 (else branch) *)
let g1 = Sos.((x1**2 + x2**2 + x3**2 + x4**2) - 1 / 1)
(* assignment in else branch *)
let t1 = Sos.([1 / 4 * (5 / 10 * x1 + 4 / 10 * x2**2);
               1 / 4 * ((-6) / 10 * x1**2 + 3 / 10 * x2**2);
               1 / 4 * (5 / 10 * x3 + 4 / 10 * x4**2);
               1 / 4 * ((-6) / 10 * x3 + 3 / 10 * x4**2)])

(* chack that invariant p >= 0 satisfy initial conditions and is inductive *)
let check_inv p =
  let deg = Sos.Poly.degree p in
  let rnd n = n / 2 * 2 in
  let check_init, sigma1, sigma2, sigma3, sigma4 =
    (* p - \sigma1 pI1 - \sigma2 pI2 >= 0, \sigma{1,2} >= 0 *)
    let init, sigma1, sigma2, sigma3, sigma4 =
      let sigma1, _ = Sos.var_poly "s1" 4 (rnd (deg - Sos.degree pI1)) in
      let sigma2, _ = Sos.var_poly "s2" 4 (rnd (deg - Sos.degree pI2)) in
      let sigma3, _ = Sos.var_poly "s3" 4 (rnd (deg - Sos.degree pI3)) in
      let sigma4, _ = Sos.var_poly "s4" 4 (rnd (deg - Sos.degree pI4)) in
      Sos.(!!p - sigma1 * pI1 - sigma2 * pI2 - sigma3 * pI3 - sigma4 * pI4), sigma1, sigma2, sigma3, sigma4 in
    let ret, _, vals, _ = Sos.solve ~options Sos.Purefeas [init; sigma1; sigma2; sigma3; sigma4] in
    let sigma1 = Sos.value_poly sigma1 vals in
    let sigma2 = Sos.value_poly sigma2 vals in
    let sigma3 = Sos.value_poly sigma3 vals in
    let sigma4 = Sos.value_poly sigma4 vals in
    ret = Osdp.SdpRet.Success, sigma1, sigma2, sigma3, sigma4 in
  if not print_poly then Format.printf "check_init: %B@." check_init;
  if print_poly then
    Format.printf "@[<v 2>Let init_sigma1 x0 x1 x2 x3 :=@ %a.@ @]@." Sos.Poly.pp sigma1;
  if print_poly then
    Format.printf "@[<v 2>Let init_sigma2 x0 x1 x2 x3 :=@ %a.@ @]@." Sos.Poly.pp sigma2;
  if print_poly then
    Format.printf "@[<v 2>Let init_sigma3 x0 x1 x2 x3 :=@ %a.@ @]@." Sos.Poly.pp sigma3;
  if print_poly then
    Format.printf "@[<v 2>Let init_sigma4 x0 x1 x2 x3 :=@ %a.@ @]@." Sos.Poly.pp sigma4;
  let recheck_init, t_recheck_init =
    Osdp.Utils.profile
      (fun () ->
       let init = Sos.(!!p - !!sigma1 * pI1 - !!sigma2 * pI2 - !!sigma3 * pI3 - !!sigma4 * pI4) in
       let options = options_recheck in
       let ret, _, _, _ =
         Sos.(solve ~options Purefeas [init; !!sigma1; !!sigma2; !!sigma3; !!sigma4]) in
       ret = Osdp.SdpRet.Success) in
  if not print_poly then Format.printf "recheck_init: %B@." recheck_init;
  if not print_poly then Format.printf "time recheck_init: %.2fs@." t_recheck_init;
  let check_t0, sigma, sigma0 =
    (* p \circ t0 - \sigma p - \sigma_0 g0 >= 0, \sigma >= 0, \sigma_0 >=0 *)
    let ind0, sigma, sigma0 =
      let deg0 = List.fold_left max 0 (List.map Sos.degree t0) in
      let sigma, _ = Sos.var_poly "s" 4 (rnd ((deg0 - 1) * deg)) in
      let sigma0, _ = Sos.var_poly "s0" 4 (rnd (deg * deg0 - Sos.degree g0)) in
      Sos.(compose !!p t0 - sigma * !!p - sigma0 * g0), sigma, sigma0 in
    let ret, _, vals, _ =
      Sos.solve ~options Sos.Purefeas [ind0; sigma; sigma0] in
    let sigma = Sos.value_poly sigma vals in
    let sigma0 = Sos.value_poly sigma0 vals in
    ret = Osdp.SdpRet.Success, sigma, sigma0 in
  if not print_poly then Format.printf "check_ind0: %B@." check_t0;
  if print_poly then
    Format.printf "@[<v 2>Let ind0_sigma x0 x1 x2 x3 :=@ %a.@ @]@." Sos.Poly.pp sigma;
  if print_poly then
    Format.printf "@[<v 2>Let ind0_sigma0 x0 x1 x2 x3 :=@ %a.@ @]@." Sos.Poly.pp sigma0;
  let recheck_ind0, t_recheck_ind0 =
    Osdp.Utils.profile
      (fun () ->
       let ind0 = Sos.(compose !!p t0 - !!sigma * !!p - !!sigma0 * g0) in
       let options = options_recheck in
       let ret, _, _, _ =
         Sos.(solve ~options Purefeas [ind0; !!sigma; !!sigma0]) in
       ret = Osdp.SdpRet.Success) in
  if not print_poly then Format.printf "recheck_ind0: %B@." recheck_ind0;
  if not print_poly then Format.printf "time recheck_ind0: %.2fs@." t_recheck_ind0;
  let check_t1, sigma, sigma1 =
    (* p \circ t1 - \sigma p - \sigma_1 g1 >= 0, \sigma >= 0, \sigma_1 >=0 *)
    let ind1, sigma, sigma1 =
      let deg1 = List.fold_left max 0 (List.map Sos.degree t1) in
      let sigma, _ = Sos.var_poly "s" 4 (rnd ((deg1 - 1) * deg)) in
      let sigma1, _ = Sos.var_poly "s1" 4 (rnd (deg * deg1 - Sos.degree g1)) in
      Sos.(compose !!p t1 - sigma * !!p - sigma1 * g1), sigma, sigma1 in
    (* Format.printf "ind1 : %a@." Sos.pp ind1; *)
    let ret, _, vals, _ =
      Sos.solve ~options Sos.Purefeas [ind1; sigma; sigma1] in
    let sigma = Sos.value_poly sigma vals in
    let sigma1 = Sos.value_poly sigma1 vals in
    ret = Osdp.SdpRet.Success, sigma, sigma1 in
  if not print_poly then Format.printf "check_ind1: %B@." check_t1;
  if print_poly then
    Format.printf "@[<v 2>Let ind1_sigma x0 x1 x2 x3 :=@ %a.@ @]@." Sos.Poly.pp sigma;
  if print_poly then
    Format.printf "@[<v 2>Let ind1_sigma1 x0 x1 x2 x3 :=@ %a.@ @]@." Sos.Poly.pp sigma1;
  let recheck_ind1, t_recheck_ind1 =
    Osdp.Utils.profile
      (fun () ->
       let ind1 = Sos.(compose !!p t1 - !!sigma * !!p - !!sigma1 * g1) in
       let options = options_recheck in
       let ret, _, _, _ =
         Sos.(solve ~options Purefeas [ind1; !!sigma; !!sigma1]) in
       ret = Osdp.SdpRet.Success) in
  if not print_poly then Format.printf "recheck_ind1: %B@." recheck_ind1;
  if not print_poly then Format.printf "time recheck_ind1: %.2fs@." t_recheck_ind1;
  if not print_poly then Format.printf "recheck: %B@." (recheck_init && recheck_ind0 && recheck_ind1);
  if not print_poly then Format.printf "time recheck: %.2fs@."
                                       (t_recheck_init +. t_recheck_ind0 +. t_recheck_ind1);
  check_init && check_t0 && check_t1

module P = struct
  include Sos.Poly
  let ( / ) n m = Q.of_string n /. Q.of_string m
end

let _ =
  let p =
    let x0, x1, x2, x3 = P.(??0, ??1, ??2, ??3) in
    P.("11647081597115987955"/"9223372036854775808" + "-3687725215532135"/"590295810358705651712" * 
        x0 + "-4784391326089211"/"590295810358705651712" * x1 + "-142452343535337"/"73786976294838206464" * 
        x2 + "-3029066358209989"/"2361183241434822606848" * x3 + "-6197425989845189"/"1125899906842624" * 
        x0**2 + "8988334404640867"/"18014398509481984" * x0 * x1 + "-8284371896517237"/"2251799813685248" * 
        x1**2 + "-4164081467369649"/"9007199254740992" * x0 * x2 + "-4532178155048795"/"18014398509481984" * 
        x1 * x2 + "-6961676262634397"/"1125899906842624" * x2**2 + "-6315902905704779"/"18014398509481984" * 
        x0 * x3 + "-8413955313998759"/"72057594037927936" * x1 * x3 + "1365357737169171"/"1125899906842624" * 
        x2 * x3 + "-7433486142253741"/"1125899906842624" * x3**2 + "2382144016579325"/"281474976710656" * 
        x0**3 + "-8160009877736273"/"9007199254740992" * x0**2 * x1 + "4006632236974991"/"562949953421312" * 
        x0 * x1**2 + "2577948886320557"/"1125899906842624" * x1**3 + "2613492894841713"/"2251799813685248" * 
        x0**2 * x2 + "-677193136973371"/"1125899906842624" * x0 * x1 * x2 + "7963459766645987"/"4503599627370496" * 
        x1**2 * x2 + "7271788666574789"/"1125899906842624" * x0 * x2**2 + "3303297769713721"/"2251799813685248" * 
        x1 * x2**2 + "45606033508651"/"17592186044416" * x2**3 + "1846356132305375"/"2251799813685248" * 
        x0**2 * x3 + "-6404000910054113"/"9007199254740992" * x0 * x1 * x3 + "7378883703299035"/"4503599627370496" * 
        x1**2 * x3 + "6761425663647965"/"2251799813685248" * x0 * x2 * x3 + "2844476919648193"/"4503599627370496" * 
        x1 * x2 * x3 + "6581569677091691"/"2251799813685248" * x2**2 * x3 + "5787179029206489"/"1125899906842624" * 
        x0 * x3**2 + "4366361128896305"/"4503599627370496" * x1 * x3**2 + "5110157188552085"/"2251799813685248" * 
        x2 * x3**2 + "3020462521989343"/"2251799813685248" * x3**3 + "-4904037675027451"/"1125899906842624" * 
        x0**4 + "3049257292147041"/"4503599627370496" * x0**3 * x1 + "-1518548875299855"/"281474976710656" * 
        x0**2 * x1**2 + "4391216509130479"/"9007199254740992" * x0 * x1**3 + "-4658290951255697"/"562949953421312" * 
        x1**4 + "-2654566031477171"/"4503599627370496" * x0**3 * x2 + "7839320973422745"/"9007199254740992" * 
        x0**2 * x1 * x2 + "4693865684730371"/"18014398509481984" * x0 * x1**2 * x2 + "4679567968677747"/"4503599627370496" * 
        x1**3 * x2 + "-5443621583386503"/"4503599627370496" * x0**2 * x2**2 + "-2636667238862595"/"4503599627370496" * 
        x0 * x1 * x2**2 + "-5433511947089773"/"562949953421312" * x1**2 * x2**2 + "-574324551462649"/"1125899906842624" * 
        x0 * x2**3 + "3794406732229571"/"2251799813685248" * x1 * x2**3 + "-176764129874845"/"17592186044416" * 
        x2**4 + "-1692039013350465"/"4503599627370496" * x0**3 * x3 + "2365049762370325"/"4503599627370496" * 
        x0**2 * x1 * x3 + "3806307550685677"/"9007199254740992" * x0 * x1**2 * x3 + "292218723695125"/"281474976710656" * 
        x1**3 * x3 + "-2533031530987343"/"562949953421312" * x0**2 * x2 * x3 + "-4967629154586125"/"9007199254740992" * 
        x0 * x1 * x2 * x3 + "-3116173635573923"/"562949953421312" * x1**2 * x2 * x3 + "-8898683243274471"/"18014398509481984" * 
        x0 * x2**2 * x3 + "1737495919268015"/"1125899906842624" * x1 * x2**2 * x3 + "-4522630446594615"/"562949953421312" * 
        x2**3 * x3 + "1051568031190963"/"2251799813685248" * x0**2 * x3**2 + "-8201111391002655"/"18014398509481984" * 
        x0 * x1 * x3**2 + "-7215281580431"/"1099511627776" * x1**2 * x3**2 + "-4107438223104659"/"9007199254740992" * 
        x0 * x2 * x3**2 + "5564929446764987"/"4503599627370496" * x1 * x2 * x3**2 + "-8970955844194291"/"1125899906842624" * 
        x2**2 * x3**2 + "5541583376738847"/"36028797018963968" * x0 * x3**3 + "2243321467469375"/"2251799813685248" * 
        x1 * x3**3 + "-6211929298443969"/"1125899906842624" * x2 * x3**3 + "-1290000836954249"/"281474976710656" * 
        x3**4 + "1469490211007427"/"2251799813685248" * x0**5 + "-2494530877516467"/"4503599627370496" * 
        x0**4 * x1 + "3300939162091533"/"4503599627370496" * x0**3 * x1**2 + "-5008430608054991"/"36028797018963968" * 
        x0**2 * x1**3 + "1023364101032067"/"1125899906842624" * x0 * x1**4 + "-1206672295033609"/"2251799813685248" * 
        x1**5 + "-1617682610524025"/"2251799813685248" * x0**4 * x2 + "5289021346922057"/"36028797018963968" * 
        x0**3 * x1 * x2 + "-806071631825797"/"2251799813685248" * x0**2 * x1**2 * x2 + "1225101395549105"/"9007199254740992" * 
        x0 * x1**3 * x2 + "-3059334886640733"/"18014398509481984" * x1**4 * x2 + "2450870004812553"/"562949953421312" * 
        x0**3 * x2**2 + "-822155550847953"/"1125899906842624" * x0**2 * x1 * x2**2 + "3375747539832217"/"2251799813685248" * 
        x0 * x1**2 * x2**2 + "-4884130063568313"/"4503599627370496" * x1**3 * x2**2 + "-454037003610729"/"4503599627370496" * 
        x0**2 * x2**3 + "-4925611142010817"/"36028797018963968" * x0 * x1 * x2**3 + "888025558709323"/"2251799813685248" * 
        x1**2 * x2**3 + "611230582024939"/"562949953421312" * x0 * x2**4 + "-4129964471828309"/"36028797018963968" * 
        x1 * x2**4 + "6319675950034945"/"9007199254740992" * x2**5 + "-2290260127779053"/"4503599627370496" * 
        x0**4 * x3 + "7289373394923189"/"36028797018963968" * x0**3 * x1 * x3 + "-3824302297853023"/"9007199254740992" * 
        x0**2 * x1**2 * x3 + "6221393042203575"/"4503599627370496" * x0 * x1**3 * x3 + "-1138244006046665"/"1125899906842624" * 
        x1**4 * x3 + "-5167285372596687"/"1125899906842624" * x0**3 * x2 * x3 + "-6828027212097853"/"9007199254740992" * 
        x0**2 * x1 * x2 * x3 + "-285673825533581"/"281474976710656" * 
        x0 * x1**2 * x2 * x3 + "5840368097369149"/"18014398509481984" * 
        x1**3 * x2 * x3 + "-4070130616455153"/"4503599627370496" * x0**2 * x2**2 * x3 + "2648651611416095"/"9007199254740992" * 
        x0 * x1 * x2**2 * x3 + "-3200519407163045"/"4503599627370496" * 
        x1**2 * x2**2 * x3 + "-5768168160029019"/"2251799813685248" * x0 * x2**3 * x3 + "-7949194443891631"/"144115188075855872" * 
        x1 * x2**3 * x3 + "-586578810105305"/"2251799813685248" * x2**4 * x3 + "6019354461357497"/"1125899906842624" * 
        x0**3 * x3**2 + "-1609942273857219"/"4503599627370496" * x0**2 * x1 * x3**2 + "1407254409348457"/"1125899906842624" * 
        x0 * x1**2 * x3**2 + "-8536233906855981"/"9007199254740992" * x1**3 * x3**2 + "-6524668360384627"/"9007199254740992" * 
        x0**2 * x2 * x3**2 + "2685846789944061"/"18014398509481984" * x0 * x1 * x2 * x3**2 + "-5148799740441675"/"18014398509481984" * 
        x1**2 * x2 * x3**2 + "-5186847970709415"/"36028797018963968" * 
        x0 * x2**2 * x3**2 + "5534763306485465"/"36028797018963968" * x1 * x2**2 * x3**2 + "-6412602652032647"/"72057594037927936" * 
        x2**3 * x3**2 + "670971060371255"/"1125899906842624" * x0**2 * x3**3 + "5292215431342567"/"72057594037927936" * 
        x0 * x1 * x3**3 + "5924094811602935"/"18014398509481984" * x1**2 * x3**3 + "-8602562763129139"/"4503599627370496" * 
        x0 * x2 * x3**3 + "-1639967751484619"/"4503599627370496" * x1 * x2 * x3**3 + "-5657848100044533"/"144115188075855872" * 
        x2**2 * x3**3 + "7166557132661625"/"2251799813685248" * x0 * x3**4 + "7771160922832575"/"144115188075855872" * 
        x1 * x3**4 + "5441428613221733"/"72057594037927936" * x2 * x3**4 + "2560214127012933"/"2251799813685248" * 
        x3**5 + "-8986042412596019"/"36028797018963968" * x0**6 + "6417242596973681"/"18014398509481984" * 
        x0**5 * x1 + "-6255463744574209"/"36028797018963968" * x0**4 * x1**2 + "4340897100520019"/"36028797018963968" * 
        x0**3 * x1**3 + "-4734883736095333"/"18014398509481984" * x0**2 * x1**4 + "3835133119365713"/"288230376151711744" * 
        x0 * x1**5 + "-141078804277977"/"9007199254740992" * x1**6 + "6059642056724269"/"9007199254740992" * 
        x0**5 * x2 + "-426383904498927"/"562949953421312" * x0**4 * x1 * x2 + "8909548849894849"/"9007199254740992" * 
        x0**3 * x1**2 * x2 + "-2322506958774055"/"4503599627370496" * x0**2 * x1**3 * x2 + "785648898873295"/"2251799813685248" * 
        x0 * x1**4 * x2 + "-7605232151955141"/"144115188075855872" * x1**5 * x2 + "-1451497972168443"/"281474976710656" * 
        x0**4 * x2**2 + "6616240936245953"/"2251799813685248" * x0**3 * x1 * x2**2 + "-1507863099473975"/"281474976710656" * 
        x0**2 * x1**2 * x2**2 + "1671334800285191"/"2251799813685248" * 
        x0 * x1**3 * x2**2 + "-5245143393627625"/"2251799813685248" * x1**4 * x2**2 + "283468345257307"/"70368744177664" * 
        x0**3 * x2**3 + "-1912926689682601"/"1125899906842624" * x0**2 * x1 * x2**3 + "2800243277542667"/"1125899906842624" * 
        x0 * x1**2 * x2**3 + "-4515706207713515"/"2251799813685248" * x1**3 * x2**3 + "-1108607859535255"/"140737488355328" * 
        x0**2 * x2**4 + "202804049442037"/"140737488355328" * x0 * x1 * x2**4 + "-3450885513522561"/"562949953421312" * 
        x1**2 * x2**4 + "2150574182714015"/"1125899906842624" * x0 * x2**5 + "-2497842644081721"/"2251799813685248" * 
        x1 * x2**5 + "-5840052825530921"/"1125899906842624" * x2**6 + "2184910641303635"/"4503599627370496" * 
        x0**5 * x3 + "-4668449141863993"/"9007199254740992" * x0**4 * x1 * x3 + "7345023895433863"/"9007199254740992" * 
        x0**3 * x1**2 * x3 + "-2903202219892931"/"9007199254740992" * x0**2 * x1**3 * x3 + "-3906083344754223"/"36028797018963968" * 
        x0 * x1**4 * x3 + "-659648864246015"/"9007199254740992" * x1**5 * x3 + "2382326632596581"/"562949953421312" * 
        x0**4 * x2 * x3 + "4591542122267411"/"9007199254740992" * x0**3 * x1 * x2 * x3 + "3768124366420583"/"562949953421312" * 
        x0**2 * x1**2 * x2 * x3 + "120875023464987"/"140737488355328" * 
        x0 * x1**3 * x2 * x3 + "712578574366595"/"140737488355328" * x1**4 * x2 * x3 + "3947121726015483"/"2251799813685248" * 
        x0**3 * x2**2 * x3 + "-1716190040068089"/"562949953421312" * x0**2 * x1 * x2**2 * x3 + "317150269818473"/"1125899906842624" * 
        x0 * x1**2 * x2**2 * x3 + "4412751586462313"/"2251799813685248" * 
        x1**3 * x2**2 * x3 + "5563916388561695"/"562949953421312" * x0**2 * x2**3 * x3 + "4027323158797797"/"9007199254740992" * 
        x0 * x1 * x2**3 * x3 + "5718796382700109"/"562949953421312" * 
        x1**2 * x2**3 * x3 + "-1302729975471337"/"1125899906842624" * x0 * x2**4 * x3 + "11600094580441"/"17592186044416" * 
        x1 * x2**4 * x3 + "5926345090735915"/"562949953421312" * x2**5 * x3 + "-6893614209380797"/"1125899906842624" * 
        x0**4 * x3**2 + "2820092988153559"/"1125899906842624" * x0**3 * x1 * x3**2 + "-8228286123407983"/"1125899906842624" * 
        x0**2 * x1**2 * x3**2 + "5638610281474335"/"9007199254740992" * 
        x0 * x1**3 * x3**2 + "-533717078440309"/"140737488355328" * x1**4 * x3**2 + "8886194089291817"/"4503599627370496" * 
        x0**3 * x2 * x3**2 + "-4668178138466871"/"2251799813685248" * x0**2 * x1 * x2 * x3**2 + "4242658263557083"/"4503599627370496" * 
        x0 * x1**2 * x2 * x3**2 + "6625349881613945"/"18014398509481984" * 
        x1**3 * x2 * x3**2 + "-1512608001528685"/"281474976710656" * x0**2 * x2**2 * x3**2 + "4989251370186927"/"9007199254740992" * 
        x0 * x1 * x2**2 * x3**2 + "-2804235578817131"/"562949953421312" * 
        x1**2 * x2**2 * x3**2 + "-8400532427307149"/"4503599627370496" * 
        x0 * x2**3 * x3**2 + "2977166453873409"/"2251799813685248" * x1 * x2**3 * x3**2 + "-4546962852997935"/"562949953421312" * 
        x2**4 * x3**2 + "7803965424715667"/"2251799813685248" * x0**3 * x3**3 + "-3005935673734179"/"18014398509481984" * 
        x0**2 * x1 * x3**3 + "2487701803746935"/"1125899906842624" * x0 * x1**2 * x3**3 + "-1578205623981711"/"562949953421312" * 
        x1**3 * x3**3 + "6882897918660305"/"1125899906842624" * x0**2 * x2 * x3**3 + "5273562879732095"/"4503599627370496" * 
        x0 * x1 * x2 * x3**3 + "1162618927892229"/"140737488355328" * 
        x1**2 * x2 * x3**3 + "-5196058109445895"/"144115188075855872" * 
        x0 * x2**2 * x3**3 + "2595210114214673"/"9007199254740992" * x1 * x2**2 * x3**3 + "4624651237019909"/"562949953421312" * 
        x2**3 * x3**3 + "-1903572694913167"/"140737488355328" * x0**2 * x3**4 + "1941237249324557"/"1125899906842624" * 
        x0 * x1 * x3**4 + "-3305829294117003"/"281474976710656" * x1**2 * x3**4 + "2136373483380083"/"1125899906842624" * 
        x0 * x2 * x3**4 + "-5892600806177469"/"4503599627370496" * x1 * x2 * x3**4 + "-6099684158240867"/"1125899906842624" * 
        x2**2 * x3**4 + "3190611349115821"/"1125899906842624" * x0 * x3**5 + "-3534858082240673"/"2251799813685248" * 
        x1 * x3**5 + "5865273990625295"/"562949953421312" * x2 * x3**5 + "-4009075341257125"/"281474976710656" * 
        x3**6) in
  if print_poly then
    Format.printf "@[<v 2>Let p x0 x1 x2 x3 :=@ %a.@ @]@." Sos.Poly.pp p;
  let res = check_inv p in
  if not print_poly then Format.printf "Invariant p >= 0 proved: %B@." res
